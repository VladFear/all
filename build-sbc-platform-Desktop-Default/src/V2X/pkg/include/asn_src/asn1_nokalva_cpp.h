/*************************************************************/
/* Copyright (C) 2018 OSS Nokalva, Inc.  All rights reserved.*/
/*************************************************************/

/* THIS FILE IS PROPRIETARY MATERIAL OF OSS NOKALVA, INC.
 * AND MAY BE USED ONLY BY DIRECT LICENSEES OF OSS NOKALVA, INC.
 * THIS FILE MAY NOT BE DISTRIBUTED.
 * THIS COPYRIGHT STATEMENT MAY NOT BE REMOVED. */

/* This file was generated by a TRIAL version of the OSS ASN.1 Tools.
 * Applications built using this file can be executed only on the machine
 * on which you run the OSS ASN.1 compiler. */

/* Generated for: Home (Trial), License 77796Z 77796Z. */
/* Abstract syntax: VehicleIDFrameModule */
/* Created: Mon Nov 19 12:49:57 2018 */
/* ASN.1/C++ compiler version: 6.6 */
/* Code generated for runtime version 6.6 or later */
/* Compiler operating system: Linux with 64-bit support */
/* Compiler machine type: Intel 64 or AMD64 */
/* Target operating system: Linux with 64-bit support */
/* Target machine type: Intel 64 or AMD64 */
/* C++ compiler options required: -m64 */
/* ASN.1 compiler options and file names specified:
 * -per -cper -uper -cuper -ber -der -xer -cxer -exer -oer -coer -json -root
 * -sampleCode pdus -messageFormat msvc -allow universaltags
 * /home/ssokolov/Projects/Test/AccelerationFrameModule.asn
 * /home/ssokolov/Projects/Test/ApproachFrameModule.asn
 * /home/ssokolov/Projects/Test/BSMcoreDataModule.asn
 * /home/ssokolov/Projects/Test/ConnectionFrameModule.asn
 * /home/ssokolov/Projects/Test/DataElementsModule.asn
 * /home/ssokolov/Projects/Test/DDateTimeFrameModule.asn
 * /home/ssokolov/Projects/Test/EmergencyDetailsFrameModule.asn
 * /home/ssokolov/Projects/Test/FullPositionVectorFrameModule.asn
 * /home/ssokolov/Projects/Test/IntersectionFrameModule.asn
 * /home/ssokolov/Projects/Test/LaneFrameModule.asn
 * /home/ssokolov/Projects/Test/MSGBasicSafetyMessageModule.asn
 * /home/ssokolov/Projects/Test/MSGEmergencyVehicleAlertModule.asn
 * /home/ssokolov/Projects/Test/MSGIntersectionCollisionAvoidanceModule.asn
 * /home/ssokolov/Projects/Test/MSGMapDataModule.asn
 * /home/ssokolov/Projects/Test/MSGMessageFrameModule.asn
 * /home/ssokolov/Projects/Test/MSGRoadSideAlertModule.asn
 * /home/ssokolov/Projects/Test/MSGSignalPhaseAndTimingModule.asn
 * /home/ssokolov/Projects/Test/MSGSignalRequestMessageFrameModule.asn
 * /home/ssokolov/Projects/Test/MSGSignalStatusMessageFrameModule.asn
 * /home/ssokolov/Projects/Test/NodeFrameModule.asn
 * /home/ssokolov/Projects/Test/ParkingAreaFrameModule.asn
 * /home/ssokolov/Projects/Test/PathFrameModule.asn
 * /home/ssokolov/Projects/Test/PositionFrameModule.asn
 * /home/ssokolov/Projects/Test/PrivilegedEventsFrameModule.asn
 * /home/ssokolov/Projects/Test/RequestorDescriptionFrameModule.asn
 * /home/ssokolov/Projects/Test/RequestorPositionVectorFrameModule.asn
 * /home/ssokolov/Projects/Test/RequestorTypeFrameModule.asn
 * /home/ssokolov/Projects/Test/RestrictionFrameModule.asn
 * /home/ssokolov/Projects/Test/RoadFrameModule.asn
 * /home/ssokolov/Projects/Test/SignalRequesterInfoFrameModule.asn
 * /home/ssokolov/Projects/Test/SignalRequestPackageFrameModule.asn
 * /home/ssokolov/Projects/Test/SignalStatusPackageFrameModule.asn
 * /home/ssokolov/Projects/Test/SpeedFrameModule.asn
 * /home/ssokolov/Projects/Test/TransmissionAndSpeedFrameModule.asn
 * /home/ssokolov/Projects/Test/VehicleFrameModule.asn
 * /home/ssokolov/Projects/Test/VehicleIDFrameModule.asn
 */

#ifndef OSS_VehicleIDFrameModule
#define OSS_VehicleIDFrameModule

#include "oss.h"
#include "asn1.h"

/* Representation types */

enum YawRateConfidence {
    YawRateConfidence_unavailable = 0,
    degSec_100_00 = 1,
    degSec_010_00 = 2,
    degSec_005_00 = 3,
    degSec_001_00 = 4,
    degSec_000_10 = 5,
    degSec_000_05 = 6,
    degSec_000_01 = 7
};

enum AccelerationConfidence {
    AccelerationConfidence_unavailable = 0,
    accl_100_00 = 1,
    accl_010_00 = 2,
    accl_005_00 = 3,
    accl_001_00 = 4,
    accl_000_10 = 5,
    accl_000_05 = 6,
    accl_000_01 = 7
};

enum SteeringWheelAngleConfidence {
    SteeringWheelAngleConfidence_unavailable = 0,
    prec2deg = 1,
    prec1deg = 2,
    prec0_02deg = 3
};

enum TransmissionState {
    neutral = 0,
    park = 1,
    forwardGears = 2,
    reverseGears = 3,
    TransmissionState_reserved1 = 4,
    reserved2 = 5,
    reserved3 = 6,
    TransmissionState_unavailable = 7
};

enum TractionControlStatus {
    TractionControlStatus_unavailable = 0,
    TractionControlStatus_off = 1,
    TractionControlStatus_on = 2,
    TractionControlStatus_engaged = 3
};

enum AntiLockBrakeStatus {
    AntiLockBrakeStatus_unavailable = 0,
    AntiLockBrakeStatus_off = 1,
    AntiLockBrakeStatus_on = 2,
    AntiLockBrakeStatus_engaged = 3
};

enum StabilityControlStatus {
    StabilityControlStatus_unavailable = 0,
    StabilityControlStatus_off = 1,
    StabilityControlStatus_on = 2,
    StabilityControlStatus_engaged = 3
};

enum BrakeBoostApplied {
    BrakeBoostApplied_unavailable = 0,
    BrakeBoostApplied_off = 1,
    BrakeBoostApplied_on = 2
};

enum AuxiliaryBrakeStatus {
    AuxiliaryBrakeStatus_unavailable = 0,
    AuxiliaryBrakeStatus_off = 1,
    AuxiliaryBrakeStatus_on = 2,
    AuxiliaryBrakeStatus_reserved = 3
};

enum DSRCmsgIDType {
    mapData = 18,
    signalPhaseAndTimingMessage = 19,
    basicSafetyMessage = 20,
    commonSafetyRequest = 21,
    emergencyVehicleAlert = 22,
    intersectionCollision = 23,
    nmeaCorrections = 24,
    probeDataManagement = 25,
    probeVehicleData = 26,
    roadSideAlert = 27,
    rtcmCorrections = 28,
    signalRequestMessage = 29,
    signalStatusMessage = 30,
    travelerInformation = 31,
    personalSafetyMessage = 32,
    testMessage00 = 240,
    testMessage01 = 241,
    testMessage02 = 242,
    testMessage03 = 243,
    testMessage04 = 244,
    testMessage05 = 245,
    testMessage06 = 246,
    testMessage07 = 247,
    testMessage08 = 248,
    testMessage09 = 249,
    testMessage10 = 250,
    testMessage11 = 251,
    testMessage12 = 252,
    testMessage13 = 253,
    testMessage14 = 254,
    testMessage15 = 255
};

enum AdvisorySpeedType {
    AdvisorySpeedType_none = 0,
    greenwave = 1,
    ecoDrive = 2,
    AdvisorySpeedType_transit = 3
};

enum AnimalPropelledType {
    AnimalPropelledType_unavailable = 0,
    AnimalPropelledType_otherTypes = 1,
    animalMounted = 2,
    animalDrawnCarriage = 3
};

enum AnimalType {
    AnimalType_unavailable = 0,
    serviceUse = 1,
    AnimalType_pet = 2,
    farm = 3
};

enum Attachment {
    Attachment_unavailable = 0,
    stroller = 1,
    bicycleTrailer = 2,
    cart = 3,
    Attachment_wheelchair = 4,
    otherWalkAssistAttachments = 5,
    Attachment_pet = 6
};

enum BasicVehicleRole {
    basicVehicle = 0,
    publicTransport = 1,
    specialTransport = 2,
    dangerousGoods = 3,
    roadWork = 4,
    roadRescue = 5,
    BasicVehicleRole_emergency = 6,
    safetyCar = 7,
    none_unknown = 8,
    truck = 9,
    motorcycle = 10,
    roadSideSource = 11,
    police = 12,
    fire = 13,
    ambulance = 14,
    dot = 15,
    BasicVehicleRole_transit = 16,
    BasicVehicleRole_slowMoving = 17,
    stopNgo = 18,
    cyclist = 19,
    pedestrian = 20,
    nonMotorized = 21,
    military = 22
};

enum BrakeAppliedPressure {
    BrakeAppliedPressure_unavailable = 0,
    minPressure = 1,
    bkLvl_2 = 2,
    bkLvl_3 = 3,
    bkLvl_4 = 4,
    bkLvl_5 = 5,
    bkLvl_6 = 6,
    bkLvl_7 = 7,
    bkLvl_8 = 8,
    bkLvl_9 = 9,
    bkLvl_10 = 10,
    bkLvl_11 = 11,
    bkLvl_12 = 12,
    bkLvl_13 = 13,
    bkLvl_14 = 14,
    maxPressure = 15
};

enum DirectionOfUse {
    DirectionOfUse_unavailable = 0,
    forward = 1,
    reverse = 2,
    both = 3
};

enum DistanceUnits {
    centimeter = 0,
    cm2_5 = 1,
    decimeter = 2,
    meter = 3,
    kilometer = 4,
    foot = 5,
    yard = 6,
    mile = 7
};

enum ElevationConfidence {
    ElevationConfidence_unavailable = 0,
    elev_500_00 = 1,
    elev_200_00 = 2,
    elev_100_00 = 3,
    elev_050_00 = 4,
    elev_020_00 = 5,
    elev_010_00 = 6,
    elev_005_00 = 7,
    elev_002_00 = 8,
    elev_001_00 = 9,
    elev_000_50 = 10,
    elev_000_20 = 11,
    elev_000_10 = 12,
    elev_000_05 = 13,
    elev_000_02 = 14,
    elev_000_01 = 15
};

enum Extent {
    useInstantlyOnly = 0,
    useFor3meters = 1,
    useFor10meters = 2,
    useFor50meters = 3,
    useFor100meters = 4,
    useFor500meters = 5,
    useFor1000meters = 6,
    useFor5000meters = 7,
    useFor10000meters = 8,
    useFor50000meters = 9,
    useFor100000meters = 10,
    useFor500000meters = 11,
    useFor1000000meters = 12,
    useFor5000000meters = 13,
    useFor10000000meters = 14,
    forever = 15
};

enum HeadingConfidence {
    HeadingConfidence_unavailable = 0,
    prec10deg = 1,
    prec05deg = 2,
    prec01deg = 3,
    prec0_1deg = 4,
    prec0_05deg = 5,
    prec0_01deg = 6,
    prec0_0125deg = 7
};

enum HumanPropelledType {
    HumanPropelledType_unavailable = 0,
    HumanPropelledType_otherTypes = 1,
    onFoot = 2,
    skateboard = 3,
    pushOrKickScooter = 4,
    HumanPropelledType_wheelchair = 5
};

enum TirePressureThresholdDetection {
    noData = 0,
    overPressure = 1,
    noWarningPressure = 2,
    underPressure = 3,
    extremeUnderPressure = 4,
    undefined = 5,
    errorIndicator = 6,
    notAvailable = 7
};

enum WheelEndElectFault {
    isOk = 0,
    isNotDefined = 1,
    isError = 2,
    isNotSupported = 3
};

enum WheelSensorStatus {
    WheelSensorStatus_off = 0,
    WheelSensorStatus_on = 1,
    notDefined = 2,
    notSupported = 3
};

enum LayerType {
    LayerType_none = 0,
    mixedContent = 1,
    generalMapData = 2,
    intersectionData = 3,
    curveData = 4,
    roadwaySectionData = 5,
    parkingAreaData = 6,
    sharedLaneData = 7
};

enum ParkingAreaType {
    costless = 0,
    payed = 1,
    partiallyPayed = 2,
    nightFree = 3
};

enum LightbarInUse {
    LightbarInUse_unavailable = 0,
    LightbarInUse_notInUse = 1,
    LightbarInUse_inUse = 2,
    yellowCautionLights = 3,
    schooldBusLights = 4,
    arrowSignsActive = 5,
    slowMovingVehicle = 6,
    freqStops = 7
};

enum Location_quality {
    loc_qual_bt1m = 0,
    loc_qual_bt5m = 1,
    loc_qual_bt12m = 2,
    loc_qual_bt50m = 3,
    loc_qual_bt125m = 4,
    loc_qual_bt500m = 5,
    loc_qual_bt1250m = 6,
    loc_qual_unknown = 7
};

enum Location_tech {
    loc_tech_unknown = 0,
    loc_tech_GNSS = 1,
    loc_tech_DGPS = 2,
    loc_tech_RTK = 3,
    loc_tech_PPP = 4,
    loc_tech_drGPS = 5,
    loc_tech_drDGPS = 6,
    loc_tech_dr = 7,
    loc_tech_nav = 8,
    loc_tech_fault = 9
};

enum MotorizedPropelledType {
    MotorizedPropelledType_unavailable = 0,
    MotorizedPropelledType_otherTypes = 1,
    wheelChair = 2,
    bicycle = 3,
    scooter = 4,
    selfBalancingDevice = 5
};

enum MovementPhaseState {
    MovementPhaseState_unavailable = 0,
    dark = 1,
    stop_Then_Proceed = 2,
    stop_And_Remain = 3,
    pre_Movement = 4,
    permissive_Movement_Allowed = 5,
    permissive_clearance = 7,
    protected_clearance = 8,
    caution_Conflicting_Traffic = 9
};

enum MultiVehicleResponse {
    MultiVehicleResponse_unavailable = 0,
    singleVehicle = 1,
    multiVehicle = 2,
    MultiVehicleResponse_reserved = 3
};

enum MUTCDCode {
    MUTCDCode_none = 0,
    regulatory = 1,
    warning = 2,
    maintenance = 3,
    motoristService = 4,
    guide = 5,
    rec = 6
};

enum NMEA_Revision {
    NMEA_Revision_unknown = 0,
    NMEA_Revision_reserved = 1,
    rev1 = 2,
    rev2 = 3,
    rev3 = 4,
    rev4 = 5,
    rev5 = 6
};

enum NodeAttributeLL {
    NodeAttributeLL_reserved = 0,
    NodeAttributeLL_stopLine = 1,
    NodeAttributeLL_roundedCapStyleA = 2,
    NodeAttributeLL_roundedCapStyleB = 3,
    NodeAttributeLL_mergePoint = 4,
    NodeAttributeLL_divergePoint = 5,
    NodeAttributeLL_downstreamStopLine = 6,
    NodeAttributeLL_downstreamStartNode = 7,
    NodeAttributeLL_closedToTraffic = 8,
    NodeAttributeLL_safeIsland = 9,
    path = 10,
    NodeAttributeLL_curbPresentAtStepOff = 11,
    hydrantPresent = 12
};

enum NodeAttributeXY {
    NodeAttributeXY_reserved = 0,
    NodeAttributeXY_stopLine = 1,
    NodeAttributeXY_roundedCapStyleA = 2,
    NodeAttributeXY_roundedCapStyleB = 3,
    NodeAttributeXY_mergePoint = 4,
    NodeAttributeXY_divergePoint = 5,
    NodeAttributeXY_downstreamStopLine = 6,
    NodeAttributeXY_downstreamStartNode = 7,
    NodeAttributeXY_closedToTraffic = 8,
    NodeAttributeXY_safeIsland = 9,
    NodeAttributeXY_curbPresentAtStepOff = 10
};

enum NumberOfParticipantsInCluster {
    NumberOfParticipantsInCluster_unavailable = 0,
    NumberOfParticipantsInCluster_small = 1,
    medium = 2,
    large = 3
};

enum PersonalDeviceUserType {
    PersonalDeviceUserType_unavailable = 0,
    aPEDESTRIAN = 1,
    aPEDALCYCLIST = 2,
    aPUBLICSAFETYWORKER = 3,
    anANIMAL = 4
};

enum PositionConfidence {
    PositionConfidence_unavailable = 0,
    a500m = 1,
    a200m = 2,
    a100m = 3,
    a50m = 4,
    a20m = 5,
    a10m = 6,
    a5m = 7,
    a2m = 8,
    a1m = 9,
    a50cm = 10,
    a20cm = 11,
    a10cm = 12,
    a5cm = 13,
    a2cm = 14,
    a1cm = 15
};

enum PrioritizationResponseStatus {
    PrioritizationResponseStatus_unknown = 0,
    requested = 1,
    processing = 2,
    watchOtherTraffic = 3,
    granted = 4,
    rejected = 5,
    maxPresence = 6,
    reserviceLocked = 7
};

enum PriorityRequestType {
    priorityRequestTypeReserved = 0,
    priorityRequest = 1,
    priorityRequestUpdate = 2,
    priorityCancellation = 3
};

enum PublicSafetyEventResponderWorkerType {
    PublicSafetyEventResponderWorkerType_unavailable = 0,
    towOperater = 1,
    fireAndEMSWorker = 2,
    aDOTWorker = 3,
    lawEnforcement = 4,
    hazmatResponder = 5,
    animalControlWorker = 6,
    otherPersonnel = 7
};

enum RainSensor {
    RainSensor_none = 0,
    lightMist = 1,
    heavyMist = 2,
    lightRainOrDrizzle = 3,
    rain = 4,
    moderateRain = 5,
    heavyRain = 6,
    heavyDownpour = 7
};

enum RequestedItem {
    RequestedItem_reserved = 0,
    itemA = 1,
    itemB = 2,
    itemC = 3,
    itemD = 4,
    itemE = 5,
    itemF = 6,
    itemG = 7,
    itemI = 8,
    itemJ = 9,
    itemK = 10,
    itemL = 11,
    itemM = 12,
    itemN = 13,
    itemO = 14,
    itemP = 15,
    itemQ = 16
};

enum ParkingAcessPointTypes {
    entry = 0,
    exit = 1
};

enum RequestImportanceLevel {
    requestImportanceLevelUnKnown = 0,
    requestImportanceLevel1 = 1,
    requestImportanceLevel2 = 2,
    requestImportanceLevel3 = 3,
    requestImportanceLevel4 = 4,
    requestImportanceLevel5 = 5,
    requestImportanceLevel6 = 6,
    requestImportanceLevel7 = 7,
    requestImportanceLevel8 = 8,
    requestImportanceLevel9 = 9,
    requestImportanceLevel10 = 10,
    requestImportanceLevel11 = 11,
    requestImportanceLevel12 = 12,
    requestImportanceLevel13 = 13,
    requestImportanceLevel14 = 14,
    requestImportanceReserved = 15
};

enum RequestSubRole {
    requestSubRoleUnKnown = 0,
    requestSubRole1 = 1,
    requestSubRole2 = 2,
    requestSubRole3 = 3,
    requestSubRole4 = 4,
    requestSubRole5 = 5,
    requestSubRole6 = 6,
    requestSubRole7 = 7,
    requestSubRole8 = 8,
    requestSubRole9 = 9,
    requestSubRole10 = 10,
    requestSubRole11 = 11,
    requestSubRole12 = 12,
    requestSubRole13 = 13,
    requestSubRole14 = 14,
    requestSubRoleReserved = 15
};

enum ResponseType {
    notInUseOrNotEquipped = 0,
    ResponseType_emergency = 1,
    nonEmergency = 2,
    pursuit = 3,
    stationary = 4,
    ResponseType_slowMoving = 5,
    stopAndGoMovement = 6
};

enum RestrictionAppliesTo {
    RestrictionAppliesTo_none = 0,
    equippedTransit = 1,
    equippedTaxis = 2,
    equippedOther = 3,
    emissionCompliant = 4,
    equippedBicycle = 5,
    weightCompliant = 6,
    heightCompliant = 7,
    pedestrians = 8,
    slowMovingPersons = 9,
    wheelchairUsers = 10,
    visualDisabilities = 11,
    audioDisabilities = 12,
    otherUnknownDisabilities = 13
};

enum RTCM_Revision {
    RTCM_Revision_unknown = 0,
    rtcmRev2 = 1,
    rtcmRev3 = 2,
    RTCM_Revision_reserved = 3
};

enum SegmentAttributeLL {
    SegmentAttributeLL_reserved = 0,
    SegmentAttributeLL_doNotBlock = 1,
    SegmentAttributeLL_whiteLine = 2,
    SegmentAttributeLL_mergingLaneLeft = 3,
    SegmentAttributeLL_mergingLaneRight = 4,
    SegmentAttributeLL_curbOnLeft = 5,
    SegmentAttributeLL_curbOnRight = 6,
    SegmentAttributeLL_loadingzoneOnLeft = 7,
    SegmentAttributeLL_loadingzoneOnRight = 8,
    SegmentAttributeLL_turnOutPointOnLeft = 9,
    SegmentAttributeLL_adjacentParkingOnLeft = 10,
    SegmentAttributeLL_sharedBikeLane = 11,
    bikeBoxInFront = 12,
    SegmentAttributeLL_transitStopOnLeft = 13,
    SegmentAttributeLL_transitStopOnRight = 14,
    SegmentAttributeLL_transitStopInLane = 15,
    SegmentAttributeLL_sharedWithTrackedVehicle = 16,
    SegmentAttributeLL_safeIsland = 17,
    SegmentAttributeLL_lowCurbsPresent = 18,
    SegmentAttributeLL_rumbleStripPresent = 19,
    SegmentAttributeLL_audibleSignalingPresent = 20,
    SegmentAttributeLL_adaptiveTimingPresent = 21,
    SegmentAttributeLL_rfSignalRequestPresent = 22,
    SegmentAttributeLL_partialCurbIntrusion = 23,
    SegmentAttributeLL_taperToLeft = 24,
    SegmentAttributeLL_taperToCenterLine = 25,
    SegmentAttributeLL_parallelParking = 26,
    SegmentAttributeLL_headInParking = 27,
    SegmentAttributeLL_freeParking = 28,
    timeRestrictionsOnParking = 29,
    SegmentAttributeLL_costToPark = 30,
    SegmentAttributeLL_midBlockCurbPresent = 31,
    SegmentAttributeLL_unEvenPavementPresent = 32
};

enum SegmentAttributeXY {
    SegmentAttributeXY_reserved = 0,
    SegmentAttributeXY_doNotBlock = 1,
    SegmentAttributeXY_whiteLine = 2,
    SegmentAttributeXY_mergingLaneLeft = 3,
    SegmentAttributeXY_mergingLaneRight = 4,
    SegmentAttributeXY_curbOnLeft = 5,
    SegmentAttributeXY_curbOnRight = 6,
    SegmentAttributeXY_loadingzoneOnLeft = 7,
    SegmentAttributeXY_loadingzoneOnRight = 8,
    SegmentAttributeXY_turnOutPointOnLeft = 9,
    turnOutPointOnRight = 10,
    SegmentAttributeXY_adjacentParkingOnLeft = 11,
    adjacentParkingOnRight = 12,
    adjacentBikeLaneOnLeft = 13,
    adjacentBikeLaneOnRight = 14,
    SegmentAttributeXY_sharedBikeLane = 15,
    SegmentAttributeXY_transitStopOnLeft = 16,
    SegmentAttributeXY_transitStopOnRight = 17,
    SegmentAttributeXY_transitStopInLane = 18,
    SegmentAttributeXY_sharedWithTrackedVehicle = 19,
    SegmentAttributeXY_safeIsland = 20,
    SegmentAttributeXY_lowCurbsPresent = 21,
    SegmentAttributeXY_rumbleStripPresent = 22,
    SegmentAttributeXY_audibleSignalingPresent = 23,
    SegmentAttributeXY_adaptiveTimingPresent = 24,
    SegmentAttributeXY_rfSignalRequestPresent = 25,
    SegmentAttributeXY_partialCurbIntrusion = 26,
    SegmentAttributeXY_taperToLeft = 27,
    taperToRight = 28,
    SegmentAttributeXY_taperToCenterLine = 29,
    SegmentAttributeXY_parallelParking = 30,
    SegmentAttributeXY_headInParking = 31,
    SegmentAttributeXY_freeParking = 32,
    SegmentAttributeXY_costToPark = 33,
    SegmentAttributeXY_midBlockCurbPresent = 34,
    SegmentAttributeXY_unEvenPavementPresent = 35
};

enum SirenInUse {
    SirenInUse_unavailable = 0,
    SirenInUse_notInUse = 1,
    SirenInUse_inUse = 2,
    SirenInUse_reserved = 3
};

enum SpeedConfidence {
    SpeedConfidence_unavailable = 0,
    prec100ms = 1,
    prec10ms = 2,
    prec5ms = 3,
    prec1ms = 4,
    prec0_1ms = 5,
    prec0_05ms = 6,
    prec0_01ms = 7
};

enum SpeedLimitType {
    SpeedLimitType_unknown = 0,
    maxSpeedInSchoolZone = 1,
    maxSpeedInSchoolZoneWhenChildrenArePresent = 2,
    maxSpeedInConstructionZone = 3,
    vehicleMinSpeed = 4,
    vehicleMaxSpeed = 5,
    vehicleNightMaxSpeed = 6,
    truckMinSpeed = 7,
    truckMaxSpeed = 8,
    truckNightMaxSpeed = 9,
    vehiclesWithTrailersMinSpeed = 10,
    vehiclesWithTrailersMaxSpeed = 11,
    vehiclesWithTrailersNightMaxSpeed = 12
};

enum ThrottleConfidence {
    ThrottleConfidence_unavailable = 0,
    prec10percent = 1,
    prec1percent = 2,
    prec0_5percent = 3
};

enum TimeConfidence {
    TimeConfidence_unavailable = 0,
    time_100_000 = 1,
    time_050_000 = 2,
    time_020_000 = 3,
    time_010_000 = 4,
    time_002_000 = 5,
    time_001_000 = 6,
    time_000_500 = 7,
    time_000_200 = 8,
    time_000_100 = 9,
    time_000_050 = 10,
    time_000_020 = 11,
    time_000_010 = 12,
    time_000_005 = 13,
    time_000_002 = 14,
    time_000_001 = 15,
    time_000_000_5 = 16,
    time_000_000_2 = 17,
    time_000_000_1 = 18,
    time_000_000_05 = 19,
    time_000_000_02 = 20,
    time_000_000_01 = 21,
    time_000_000_005 = 22,
    time_000_000_002 = 23,
    time_000_000_001 = 24,
    time_000_000_000_5 = 25,
    time_000_000_000_2 = 26,
    time_000_000_000_1 = 27,
    time_000_000_000_05 = 28,
    time_000_000_000_02 = 29,
    time_000_000_000_01 = 30,
    time_000_000_000_005 = 31,
    time_000_000_000_002 = 32,
    time_000_000_000_001 = 33,
    time_000_000_000_000_5 = 34,
    time_000_000_000_000_2 = 35,
    time_000_000_000_000_1 = 36,
    time_000_000_000_000_05 = 37,
    time_000_000_000_000_02 = 38,
    time_000_000_000_000_01 = 39
};

enum TransitVehicleOccupancy {
    occupancyUnknown = 0,
    occupancyEmpty = 1,
    occupancyVeryLow = 2,
    occupancyLow = 3,
    occupancyMed = 4,
    occupancyHigh = 5,
    occupancyNearlyFull = 6,
    occupancyFull = 7
};

enum TravelerInfoType {
    TravelerInfoType_unknown = 0,
    advisory = 1,
    roadSignage = 2,
    commercialSignage = 3
};

enum VehicleStatusDeviceTypeTag {
    VehicleStatusDeviceTypeTag_unknown = 0,
    lights = 1,
    wipers = 2,
    brakes = 3,
    stab = 4,
    trac = 5,
    abs = 6,
    sunS = 7,
    rainS = 8,
    airTemp = 9,
    steering = 10,
    vertAccelThres = 11,
    vertAccel = 12,
    hozAccelLong = 13,
    hozAccelLat = 14,
    hozAccelCon = 15,
    accel4way = 16,
    confidenceSet = 17,
    obDist = 18,
    obDirect = 19,
    yaw = 20,
    yawRateCon = 21,
    dateTime = 22,
    fullPos = 23,
    position2D = 24,
    position3D = 25,
    vehicle = 26,
    speedHeadC = 27,
    speedC = 28
};

enum VehicleType {
    VehicleType_none = 0,
    VehicleType_unknown = 1,
    special = 2,
    moto = 3,
    car = 4,
    carOther = 5,
    bus = 6,
    axleCnt2 = 7,
    axleCnt3 = 8,
    axleCnt4 = 9,
    axleCnt4Trailer = 10,
    axleCnt5Trailer = 11,
    axleCnt6Trailer = 12,
    axleCnt5MultiTrailer = 13,
    axleCnt6MultiTrailer = 14,
    axleCnt7MultiTrailer = 15
};

enum WiperStatus {
    WiperStatus_unavailable = 0,
    WiperStatus_off = 1,
    intermittent = 2,
    low = 3,
    high = 4,
    washerInUse = 5,
    automaticPresent = 6
};


const OSS_UINT32 BrakeAppliedStatus_unavailable = 0;
const OSS_UINT32 BrakeAppliedStatus_leftFront = 1;
const OSS_UINT32 BrakeAppliedStatus_leftRear = 2;
const OSS_UINT32 BrakeAppliedStatus_rightFront = 3;
const OSS_UINT32 BrakeAppliedStatus_rightRear = 4;

const OSS_UINT32 maneuverStraightAllowed = 0;
const OSS_UINT32 maneuverLeftAllowed = 1;
const OSS_UINT32 maneuverRightAllowed = 2;
const OSS_UINT32 maneuverUTurnAllowed = 3;
const OSS_UINT32 maneuverLeftTurnOnRedAllowed = 4;
const OSS_UINT32 maneuverRightTurnOnRedAllowed = 5;
const OSS_UINT32 maneuverLaneChangeAllowed = 6;
const OSS_UINT32 maneuverNoStoppingAllowed = 7;
const OSS_UINT32 yieldAllwaysRequired = 8;
const OSS_UINT32 goWithHalt = 9;
const OSS_UINT32 caution = 10;
const OSS_UINT32 AllowedManeuvers_reserved1 = 11;

const OSS_UINT32 lowBeamHeadlightsOn = 0;
const OSS_UINT32 highBeamHeadlightsOn = 1;
const OSS_UINT32 leftTurnSignalOn = 2;
const OSS_UINT32 rightTurnSignalOn = 3;
const OSS_UINT32 hazardSignalOn = 4;
const OSS_UINT32 automaticLightControlOn = 5;
const OSS_UINT32 daytimeRunningLightsOn = 6;
const OSS_UINT32 fogLightOn = 7;
const OSS_UINT32 parkingLightsOn = 8;

const OSS_UINT32 GNSSstatus_unavailable = 0;
const OSS_UINT32 isHealthy = 1;
const OSS_UINT32 isMonitored = 2;
const OSS_UINT32 baseStationType = 3;
const OSS_UINT32 aPDOPofUnder5 = 4;
const OSS_UINT32 inViewOfUnder5 = 5;
const OSS_UINT32 localCorrectionsPresent = 6;
const OSS_UINT32 networkCorrectionsPresent = 7;

const OSS_UINT32 from000_0to022_5degrees = 0;
const OSS_UINT32 from022_5to045_0degrees = 1;
const OSS_UINT32 from045_0to067_5degrees = 2;
const OSS_UINT32 from067_5to090_0degrees = 3;
const OSS_UINT32 from090_0to112_5degrees = 4;
const OSS_UINT32 from112_5to135_0degrees = 5;
const OSS_UINT32 from135_0to157_5degrees = 6;
const OSS_UINT32 from157_5to180_0degrees = 7;
const OSS_UINT32 from180_0to202_5degrees = 8;
const OSS_UINT32 from202_5to225_0degrees = 9;
const OSS_UINT32 from225_0to247_5degrees = 10;
const OSS_UINT32 from247_5to270_0degrees = 11;
const OSS_UINT32 from270_0to292_5degrees = 12;
const OSS_UINT32 from292_5to315_0degrees = 13;
const OSS_UINT32 from315_0to337_5degrees = 14;
const OSS_UINT32 from337_5to360_0degrees = 15;

const OSS_UINT32 manualControlIsEnabled = 0;
const OSS_UINT32 stopTimeIsActivated = 1;
const OSS_UINT32 failureFlash = 2;
const OSS_UINT32 preemptIsActive = 3;
const OSS_UINT32 signalPriorityIsActive = 4;
const OSS_UINT32 fixedTimeOperation = 5;
const OSS_UINT32 trafficDependentOperation = 6;
const OSS_UINT32 standbyOperation = 7;
const OSS_UINT32 failureMode = 8;
const OSS_UINT32 IntersectionStatusObject_off = 9;
const OSS_UINT32 recentMAPmessageUpdate = 10;
const OSS_UINT32 recentChangeInMAPassignedLanesIDsUsed = 11;
const OSS_UINT32 noValidMAPisAvailableAtThisTime = 12;
const OSS_UINT32 noValidSPATisAvailableAtThisTime = 13;

const OSS_UINT32 median_RevocableLane = 0;
const OSS_UINT32 LaneAttributes_Barrier_median = 1;
const OSS_UINT32 whiteLineHashing = 2;
const OSS_UINT32 stripedLines = 3;
const OSS_UINT32 doubleStripedLines = 4;
const OSS_UINT32 trafficCones = 5;
const OSS_UINT32 constructionBarrier = 6;
const OSS_UINT32 trafficChannels = 7;
const OSS_UINT32 lowCurbs = 8;
const OSS_UINT32 highCurbs = 9;

const OSS_UINT32 bikeRevocableLane = 0;
const OSS_UINT32 pedestrianUseAllowed = 1;
const OSS_UINT32 isBikeFlyOverLane = 2;
const OSS_UINT32 LaneAttributes_Bike_fixedCycleTime = 3;
const OSS_UINT32 LaneAttributes_Bike_biDirectionalCycleTimes = 4;
const OSS_UINT32 isolatedByBarrier = 5;
const OSS_UINT32 LaneAttributes_Bike_unsignalizedSegmentsPresent = 6;

const OSS_UINT32 crosswalkRevocableLane = 0;
const OSS_UINT32 LaneAttributes_Crosswalk_bicyleUseAllowed = 1;
const OSS_UINT32 isXwalkFlyOverLane = 2;
const OSS_UINT32 LaneAttributes_Crosswalk_fixedCycleTime = 3;
const OSS_UINT32 LaneAttributes_Crosswalk_biDirectionalCycleTimes = 4;
const OSS_UINT32 hasPushToWalkButton = 5;
const OSS_UINT32 audioSupport = 6;
const OSS_UINT32 LaneAttributes_Crosswalk_rfSignalRequestPresent = 7;
const OSS_UINT32 LaneAttributes_Crosswalk_unsignalizedSegmentsPresent = 8;

const OSS_UINT32 parkingRevocableLane = 0;
const OSS_UINT32 parallelParkingInUse = 1;
const OSS_UINT32 headInParkingInUse = 2;
const OSS_UINT32 doNotParkZone = 3;
const OSS_UINT32 parkingForBusUse = 4;
const OSS_UINT32 parkingForTaxiUse = 5;
const OSS_UINT32 noPublicParkingUse = 6;

const OSS_UINT32 sidewalk_RevocableLane = 0;
const OSS_UINT32 LaneAttributes_Sidewalk_bicyleUseAllowed = 1;
const OSS_UINT32 isSidewalkFlyOverLane = 2;
const OSS_UINT32 walkBikes = 3;

const OSS_UINT32 stripeToConnectingLanesRevocableLane = 0;
const OSS_UINT32 stripeDrawOnLeft = 1;
const OSS_UINT32 stripeDrawOnRight = 2;
const OSS_UINT32 stripeToConnectingLanesLeft = 3;
const OSS_UINT32 stripeToConnectingLanesRight = 4;
const OSS_UINT32 stripeToConnectingLanesAhead = 5;

const OSS_UINT32 spec_RevocableLane = 0;
const OSS_UINT32 spec_commuterRailRoadTrack = 1;
const OSS_UINT32 spec_lightRailRoadTrack = 2;
const OSS_UINT32 spec_heavyRailRoadTrack = 3;
const OSS_UINT32 spec_otherRailType = 4;

const OSS_UINT32 isVehicleRevocableLane = 0;
const OSS_UINT32 isVehicleFlyOverLane = 1;
const OSS_UINT32 hovLaneUseOnly = 2;
const OSS_UINT32 restrictedToBusUse = 3;
const OSS_UINT32 restrictedToTaxiUse = 4;
const OSS_UINT32 restrictedFromPublicUse = 5;
const OSS_UINT32 hasIRbeaconCoverage = 6;
const OSS_UINT32 permissionOnRequest = 7;

const OSS_UINT32 ingressPath = 0;
const OSS_UINT32 egressPath = 1;

const OSS_UINT32 overlappingLaneDescriptionProvided = 0;
const OSS_UINT32 multipleLanesTreatedAsOneLane = 1;
const OSS_UINT32 otherNonMotorizedTrafficTypes = 2;
const OSS_UINT32 individualMotorizedVehicleTraffic = 3;
const OSS_UINT32 busVehicleTraffic = 4;
const OSS_UINT32 taxiVehicleTraffic = 5;
const OSS_UINT32 pedestriansTraffic = 6;
const OSS_UINT32 cyclistVehicleTraffic = 7;
const OSS_UINT32 trackedVehicleTraffic = 8;
const OSS_UINT32 pedestrianTraffic = 9;

const OSS_UINT32 PersonalAssistive_unavailable = 0;
const OSS_UINT32 otherType = 1;
const OSS_UINT32 vision = 2;
const OSS_UINT32 hearing = 3;
const OSS_UINT32 movement = 4;
const OSS_UINT32 cognition = 5;

const OSS_UINT32 PersonalDeviceUsageState_unavailable = 0;
const OSS_UINT32 other = 1;
const OSS_UINT32 idle = 2;
const OSS_UINT32 listeningToAudio = 3;
const OSS_UINT32 typing = 4;
const OSS_UINT32 calling = 5;
const OSS_UINT32 playingGames = 6;
const OSS_UINT32 reading = 7;
const OSS_UINT32 viewing = 8;

const OSS_UINT32 peUnavailable = 0;
const OSS_UINT32 peEmergencyResponse = 1;
const OSS_UINT32 peEmergencyLightsActive = 2;
const OSS_UINT32 peEmergencySoundActive = 3;
const OSS_UINT32 peNonEmergencyLightsActive = 4;
const OSS_UINT32 peNonEmergencySoundActive = 5;

const OSS_UINT32 PublicSafetyAndRoadWorkerActivity_unavailable = 0;
const OSS_UINT32 workingOnRoad = 1;
const OSS_UINT32 settingUpClosures = 2;
const OSS_UINT32 respondingToEvents = 3;
const OSS_UINT32 directingTraffic = 4;
const OSS_UINT32 otherActivities = 5;

const OSS_UINT32 PublicSafetyDirectingTrafficSubType_unavailable = 0;
const OSS_UINT32 policeAndTrafficOfficers = 1;
const OSS_UINT32 trafficControlPersons = 2;
const OSS_UINT32 railroadCrossingGuards = 3;
const OSS_UINT32 civilDefenseNationalGuardMilitaryPolice = 4;
const OSS_UINT32 emergencyOrganizationPersonnel = 5;
const OSS_UINT32 highwayServiceVehiclePersonnel = 6;

const OSS_UINT32 TransitStatus_none = 0;
const OSS_UINT32 TransitStatus_anADAuse = 1;
const OSS_UINT32 TransitStatus_aBikeLoad = 2;
const OSS_UINT32 TransitStatus_doorOpen = 3;
const OSS_UINT32 occM = 4;
const OSS_UINT32 occL = 5;

const OSS_UINT32 loading = 0;
const OSS_UINT32 TransitVehicleStatus_anADAuse = 1;
const OSS_UINT32 TransitVehicleStatus_aBikeLoad = 2;
const OSS_UINT32 TransitVehicleStatus_doorOpen = 3;
const OSS_UINT32 charging = 4;
const OSS_UINT32 atStopLine = 5;

const OSS_UINT32 UserSizeAndBehaviour_unavailable = 0;
const OSS_UINT32 smallStature = 1;
const OSS_UINT32 largeStature = 2;
const OSS_UINT32 erraticMoving = 3;
const OSS_UINT32 UserSizeAndBehaviour_slowMoving = 4;

const OSS_UINT32 eventHazardLights = 0;
const OSS_UINT32 eventStopLineViolation = 1;
const OSS_UINT32 eventABSactivated = 2;
const OSS_UINT32 eventTractionControlLoss = 3;
const OSS_UINT32 eventStabilityControlactivated = 4;
const OSS_UINT32 eventHazardousMaterials = 5;
const OSS_UINT32 eventReserved1 = 6;
const OSS_UINT32 eventHardBraking = 7;
const OSS_UINT32 eventLightsChanged = 8;
const OSS_UINT32 eventWipersChanged = 9;
const OSS_UINT32 eventFlatTire = 10;
const OSS_UINT32 eventDisabledVehicle = 11;
const OSS_UINT32 eventAirBagDeployment = 12;

const OSS_UINT32 notEquipped = 0;
const OSS_UINT32 VerticalAccelerationThreshold_leftFront = 1;
const OSS_UINT32 VerticalAccelerationThreshold_leftRear = 2;
const OSS_UINT32 VerticalAccelerationThreshold_rightFront = 3;
const OSS_UINT32 VerticalAccelerationThreshold_rightRear = 4;
typedef OSS_INT32 Acceleration;

typedef OSS_INT32 VerticalAcceleration;

typedef OSS_INT32 YawRate;

class OSS_PUBLIC AccelerationSet4Way   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_INT32 AccelerationSet4Way_long;
    typedef OSS_INT32 lat;
    typedef OSS_INT32 vert;
    typedef OSS_INT32 yaw;

    AccelerationSet4Way();
    AccelerationSet4Way(const AccelerationSet4Way &);
    AccelerationSet4Way(AccelerationSet4Way_long, lat, vert, yaw);

    AccelerationSet4Way & operator = (const AccelerationSet4Way &);
    int operator == (const AccelerationSet4Way &) const;
    int operator != (const AccelerationSet4Way &) const;

    AccelerationSet4Way_long & get_AccelerationSet4Way_long();
    AccelerationSet4Way_long get_AccelerationSet4Way_long() const;
    void set_AccelerationSet4Way_long(AccelerationSet4Way_long);

    lat & get_lat();
    lat get_lat() const;
    void set_lat(lat);

    vert & get_vert();
    vert get_vert() const;
    void set_vert(vert);

    yaw & get_yaw();
    yaw get_yaw() const;
    void set_yaw(yaw);
private:
    AccelerationSet4Way_long AccelerationSet4Way_long_field;
    lat lat_field;
    vert vert_field;
    yaw yaw_field;
};

class OSS_PUBLIC AccelSteerYawRateConfidence   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef enum YawRateConfidence yawRate;
    typedef enum AccelerationConfidence acceleration;
    typedef enum SteeringWheelAngleConfidence steeringWheelAngle;

    AccelSteerYawRateConfidence();
    AccelSteerYawRateConfidence(const AccelSteerYawRateConfidence &);
    AccelSteerYawRateConfidence(yawRate, acceleration, steeringWheelAngle);

    AccelSteerYawRateConfidence & operator = (const AccelSteerYawRateConfidence &);
    int operator == (const AccelSteerYawRateConfidence &) const;
    int operator != (const AccelSteerYawRateConfidence &) const;

    yawRate & get_yawRate();
    yawRate get_yawRate() const;
    void set_yawRate(yawRate);

    acceleration & get_acceleration();
    acceleration get_acceleration() const;
    void set_acceleration(acceleration);

    steeringWheelAngle & get_steeringWheelAngle();
    steeringWheelAngle get_steeringWheelAngle() const;
    void set_steeringWheelAngle(steeringWheelAngle);
private:
    yawRate yawRate_field;
    acceleration acceleration_field;
    steeringWheelAngle steeringWheelAngle_field;
};

typedef OSS_UINT32 ApproachID;

typedef OSS_UINT32 LaneID;

class OSS_PUBLIC ApproachOrLane  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	approach_chosen = 1,
	lane_chosen = 2
    };
    typedef OSS_UINT32 approach;
    typedef OSS_UINT32 lane;

    ApproachOrLane();
    ApproachOrLane(const ApproachOrLane &);

    ApproachOrLane & operator = (const ApproachOrLane &);
    int operator == (const ApproachOrLane &) const;
    int operator != (const ApproachOrLane &) const;

    approach *get_approach();
    const approach *get_approach() const;
    void set_approach(approach);

    lane *get_lane();
    const lane *get_lane() const;
    void set_lane(lane);
private:
    union {
	approach approach_field;
	lane lane_field;
    };
};

typedef OSS_UINT32 MsgCount;

typedef OssString TemporaryID;

typedef OSS_UINT32 DSecond;

typedef OSS_INT32 Latitude;

typedef OSS_INT32 Longitude;

typedef OSS_INT32 Elevation;

typedef OSS_UINT32 SemiMajorAxisAccuracy;

typedef OSS_UINT32 SemiMinorAxisAccuracy;

typedef OSS_UINT32 SemiMajorAxisOrientation;

class OSS_PUBLIC PositionAccuracy   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 semiMajor;
    typedef OSS_UINT32 semiMinor;
    typedef OSS_UINT32 orientation;

    PositionAccuracy();
    PositionAccuracy(const PositionAccuracy &);
    PositionAccuracy(semiMajor, semiMinor, orientation);

    PositionAccuracy & operator = (const PositionAccuracy &);
    int operator == (const PositionAccuracy &) const;
    int operator != (const PositionAccuracy &) const;

    semiMajor & get_semiMajor();
    semiMajor get_semiMajor() const;
    void set_semiMajor(semiMajor);

    semiMinor & get_semiMinor();
    semiMinor get_semiMinor() const;
    void set_semiMinor(semiMinor);

    orientation & get_orientation();
    orientation get_orientation() const;
    void set_orientation(orientation);
private:
    semiMajor semiMajor_field;
    semiMinor semiMinor_field;
    orientation orientation_field;
};

typedef OSS_UINT32 Speed;

typedef OSS_UINT32 Heading;

typedef OSS_INT32 SteeringWheelAngle;

typedef OssBitString BrakeAppliedStatus;

class OSS_PUBLIC BrakeSystemStatus   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssBitString wheelBrakes;
    typedef enum TractionControlStatus traction;
    typedef enum AntiLockBrakeStatus abs;
    typedef enum StabilityControlStatus scs;
    typedef enum BrakeBoostApplied brakeBoost;
    typedef enum AuxiliaryBrakeStatus auxBrakes;

    BrakeSystemStatus();
    BrakeSystemStatus(const BrakeSystemStatus &);
    BrakeSystemStatus(const wheelBrakes &, traction, abs, scs, brakeBoost, auxBrakes);

    BrakeSystemStatus & operator = (const BrakeSystemStatus &);
    int operator == (const BrakeSystemStatus &) const;
    int operator != (const BrakeSystemStatus &) const;

    wheelBrakes & get_wheelBrakes();
    const wheelBrakes & get_wheelBrakes() const;
    void set_wheelBrakes(const wheelBrakes &);

    traction & get_traction();
    traction get_traction() const;
    void set_traction(traction);

    abs & get_abs();
    abs get_abs() const;
    void set_abs(abs);

    scs & get_scs();
    scs get_scs() const;
    void set_scs(scs);

    brakeBoost & get_brakeBoost();
    brakeBoost get_brakeBoost() const;
    void set_brakeBoost(brakeBoost);

    auxBrakes & get_auxBrakes();
    auxBrakes get_auxBrakes() const;
    void set_auxBrakes(auxBrakes);
private:
    wheelBrakes wheelBrakes_field;
    traction traction_field;
    abs abs_field;
    scs scs_field;
    brakeBoost brakeBoost_field;
    auxBrakes auxBrakes_field;
};

typedef OSS_UINT32 VehicleWidth;

typedef OSS_UINT32 VehicleLength;

class OSS_PUBLIC VehicleSize   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 width;
    typedef OSS_UINT32 length;

    VehicleSize();
    VehicleSize(const VehicleSize &);
    VehicleSize(width, length);

    VehicleSize & operator = (const VehicleSize &);
    int operator == (const VehicleSize &) const;
    int operator != (const VehicleSize &) const;

    width & get_width();
    width get_width() const;
    void set_width(width);

    length & get_length();
    length get_length() const;
    void set_length(length);
private:
    width width_field;
    length length_field;
};

class OSS_PUBLIC BSMcoreData   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 msgCnt;
    typedef OssString id;
    typedef OSS_UINT32 secMark;
    typedef OSS_INT32 lat;
    typedef OSS_INT32 BSMcoreData_long;
    typedef OSS_INT32 elev;
    typedef PositionAccuracy accuracy;
    typedef enum TransmissionState transmission;
    typedef OSS_UINT32 speed;
    typedef OSS_UINT32 heading;
    typedef OSS_INT32 angle;
    typedef AccelerationSet4Way accelSet;
    typedef BrakeSystemStatus brakes;
    typedef VehicleSize size;

    BSMcoreData();
    BSMcoreData(const BSMcoreData &);
    BSMcoreData(msgCnt, const id &, secMark, lat, BSMcoreData_long, elev, const accuracy &, 
	transmission, speed, heading, angle, const accelSet &, const brakes &, const size &);

    BSMcoreData & operator = (const BSMcoreData &);
    int operator == (const BSMcoreData &) const;
    int operator != (const BSMcoreData &) const;

    msgCnt & get_msgCnt();
    msgCnt get_msgCnt() const;
    void set_msgCnt(msgCnt);

    id & get_id();
    const id & get_id() const;
    void set_id(const id &);

    secMark & get_secMark();
    secMark get_secMark() const;
    void set_secMark(secMark);

    lat & get_lat();
    lat get_lat() const;
    void set_lat(lat);

    BSMcoreData_long & get_BSMcoreData_long();
    BSMcoreData_long get_BSMcoreData_long() const;
    void set_BSMcoreData_long(BSMcoreData_long);

    elev & get_elev();
    elev get_elev() const;
    void set_elev(elev);

    accuracy & get_accuracy();
    const accuracy & get_accuracy() const;
    void set_accuracy(const accuracy &);

    transmission & get_transmission();
    transmission get_transmission() const;
    void set_transmission(transmission);

    speed & get_speed();
    speed get_speed() const;
    void set_speed(speed);

    heading & get_heading();
    heading get_heading() const;
    void set_heading(heading);

    angle & get_angle();
    angle get_angle() const;
    void set_angle(angle);

    accelSet & get_accelSet();
    const accelSet & get_accelSet() const;
    void set_accelSet(const accelSet &);

    brakes & get_brakes();
    const brakes & get_brakes() const;
    void set_brakes(const brakes &);

    size & get_size();
    const size & get_size() const;
    void set_size(const size &);
private:
    msgCnt msgCnt_field;
    id id_field;
    secMark secMark_field;
    lat lat_field;
    BSMcoreData_long BSMcoreData_long_field;
    elev elev_field;
    accuracy accuracy_field;
    transmission transmission_field;
    speed speed_field;
    heading heading_field;
    angle angle_field;
    accelSet accelSet_field;
    brakes brakes_field;
    size size_field;
};

typedef OssBitString AllowedManeuvers;

class OSS_PUBLIC ConnectingLane   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 lane;
    typedef OssBitString maneuver;

    ConnectingLane();
    ConnectingLane(const ConnectingLane &);
    ConnectingLane(lane, const maneuver &);
    ConnectingLane(lane);

    ConnectingLane & operator = (const ConnectingLane &);
    int operator == (const ConnectingLane &) const;
    int operator != (const ConnectingLane &) const;

    lane & get_lane();
    lane get_lane() const;
    void set_lane(lane);

    maneuver *get_maneuver();
    const maneuver *get_maneuver() const;
    void set_maneuver(const maneuver &);
    int maneuver_is_present() const;
    void omit_maneuver();
private:
    OSS_UINT32 bit_mask;
    lane lane_field;
    maneuver maneuver_field;
};

typedef OSS_UINT32 RoadRegulatorID;

typedef OSS_UINT32 IntersectionID;

class OSS_PUBLIC __shared1   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 region;
    typedef OSS_UINT32 id;

    __shared1();
    __shared1(const __shared1 &);
    __shared1(region, id);
    __shared1(id);

    __shared1 & operator = (const __shared1 &);
    int operator == (const __shared1 &) const;
    int operator != (const __shared1 &) const;

    region *get_region();
    const region *get_region() const;
    void set_region(region);
    int region_is_present() const;
    void omit_region();

    id & get_id();
    id get_id() const;
    void set_id(id);
private:
    OSS_UINT32 bit_mask;
    region region_field;
    id id_field;
};

typedef __shared1 IntersectionReferenceID;

typedef OSS_UINT32 SignalGroupID;

typedef OSS_UINT32 RestrictionClassID;

typedef OSS_UINT32 LaneConnectionID;

class OSS_PUBLIC Connection   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef ConnectingLane connectingLane;
    typedef __shared1 remoteIntersection;
    typedef OSS_UINT32 signalGroup;
    typedef OSS_UINT32 userClass;
    typedef OSS_UINT32 connectionID;

    Connection();
    Connection(const Connection &);
    Connection(const connectingLane &, const remoteIntersection &, signalGroup, userClass, 
	connectionID);
    Connection(const connectingLane &);

    Connection & operator = (const Connection &);
    int operator == (const Connection &) const;
    int operator != (const Connection &) const;

    connectingLane & get_connectingLane();
    const connectingLane & get_connectingLane() const;
    void set_connectingLane(const connectingLane &);

    remoteIntersection *get_remoteIntersection();
    const remoteIntersection *get_remoteIntersection() const;
    void set_remoteIntersection(const remoteIntersection &);
    int remoteIntersection_is_present() const;
    void omit_remoteIntersection();

    signalGroup *get_signalGroup();
    const signalGroup *get_signalGroup() const;
    void set_signalGroup(signalGroup);
    int signalGroup_is_present() const;
    void omit_signalGroup();

    userClass *get_userClass();
    const userClass *get_userClass() const;
    void set_userClass(userClass);
    int userClass_is_present() const;
    void omit_userClass();

    connectionID *get_connectionID();
    const connectionID *get_connectionID() const;
    void set_connectionID(connectionID);
    int connectionID_is_present() const;
    void omit_connectionID();
private:
    OSS_UINT32 bit_mask;
    connectingLane connectingLane_field;
    remoteIntersection remoteIntersection_field;
    signalGroup signalGroup_field;
    userClass userClass_field;
    connectionID connectionID_field;
};

class OSS_PUBLIC ConnectsToList : public OssList  /* SEQUENCE OF */
{
public:
    typedef Connection component;

    ConnectsToList();
    ConnectsToList(const ConnectsToList &);
    ~ConnectsToList();

    ConnectsToList & operator = (const ConnectsToList &);
    int operator == (const ConnectsToList &) const;
    int operator != (const ConnectsToList &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(ConnectsToList *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, ConnectsToList *);

    int remove_front();
    int remove_after(OssIndex);

    ConnectsToList *extract_after(OssIndex, OssIndex);
};

typedef OSS_UINT32 FreePlacesCountType;

typedef OSS_UINT32 CostToParkType;

class OSS_PUBLIC DataParameters   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString processMethod;
    typedef OssString processAgency;
    typedef OssString lastCheckedDate;
    typedef OssString geoidUsed;

    DataParameters();
    DataParameters(const DataParameters &);
    DataParameters(const processMethod &, const processAgency &, const lastCheckedDate &, 
	const geoidUsed &);

    DataParameters & operator = (const DataParameters &);
    int operator == (const DataParameters &) const;
    int operator != (const DataParameters &) const;

    processMethod & get_processMethod();
    const processMethod & get_processMethod() const;
    void set_processMethod(const processMethod &);

    processAgency & get_processAgency();
    const processAgency & get_processAgency() const;
    void set_processAgency(const processAgency &);

    lastCheckedDate & get_lastCheckedDate();
    const lastCheckedDate & get_lastCheckedDate() const;
    void set_lastCheckedDate(const lastCheckedDate &);

    geoidUsed & get_geoidUsed();
    const geoidUsed & get_geoidUsed() const;
    void set_geoidUsed(const geoidUsed &);
private:
    processMethod processMethod_field;
    processAgency processAgency_field;
    lastCheckedDate lastCheckedDate_field;
    geoidUsed geoidUsed_field;
};

typedef OSS_UINT32 SignalGroupId;

typedef OssString DescriptiveName;

typedef ossBoolean WaitOnStopLine;

typedef OSS_UINT32 AmbientAirPressure;

typedef OSS_UINT32 AmbientAirTemperature;

typedef OSS_UINT32 Angle;

typedef OSS_UINT32 AttachmentRadius;

typedef OSS_UINT32 BasicVehicleClass;

typedef OSS_UINT32 BumperHeight;

typedef OSS_UINT32 CoarseHeading;

typedef OSS_UINT32 CoefficientOfFriction;

typedef OSS_UINT32 Confidence;

typedef OSS_UINT32 Count;

typedef OSS_UINT32 DDay;

typedef OSS_INT32 DeltaAngle;

typedef OSS_INT32 DeltaTime;

typedef OSS_UINT32 DHour;

typedef OSS_UINT32 DMinute;

typedef OSS_UINT32 DMonth;

typedef OSS_INT32 DOffset;

typedef OSS_INT32 DrivenLineOffsetLg;

typedef OSS_INT32 DrivenLineOffsetSm;

typedef OSS_INT32 DrivingWheelAngle;

typedef OSS_UINT32 Duration;

typedef OSS_UINT32 DYear;

typedef OSS_UINT32 FuelType;

typedef OSS_UINT32 GrossDistance;

typedef OSS_UINT32 GrossSpeed;

typedef OSS_UINT32 Iso3833VehicleType;

typedef OSS_UINT32 AxleLocation;

typedef OSS_UINT32 AxleWeight;

typedef OSS_UINT32 CargoWeight;

typedef OSS_UINT32 DriveAxleLiftAirPressure;

typedef OSS_UINT32 DriveAxleLocation;

typedef OSS_UINT32 DriveAxleLubePressure;

typedef OSS_INT32 DriveAxleTemperature;

typedef OSS_UINT32 SteeringAxleLubePressure;

typedef OSS_INT32 SteeringAxleTemperature;

typedef OSS_UINT32 TireLeakageRate;

typedef OSS_UINT32 TireLocation;

typedef OSS_UINT32 TirePressure;

typedef OSS_INT32 TireTemp;

typedef OSS_UINT32 TrailerWeight;

typedef OSS_UINT32 LaneWidth;

typedef OSS_UINT32 LayerID;

typedef OSS_INT32 MergeDivergeNodeAngle;

typedef OSS_UINT32 MinuteOfTheYear;

typedef OSS_UINT32 MinutesDuration;

typedef OSS_UINT32 NMEA_MsgType;

typedef OSS_UINT32 ObjectCount;

typedef OSS_UINT32 ObstacleDistance;

typedef OSS_INT32 Offset_B09;

typedef OSS_INT32 Offset_B10;

typedef OSS_INT32 Offset_B11;

typedef OSS_INT32 Offset_B12;

typedef OSS_INT32 Offset_B13;

typedef OSS_INT32 Offset_B14;

typedef OSS_INT32 Offset_B16;

typedef OSS_INT32 OffsetLL_B12;

typedef OSS_INT32 OffsetLL_B14;

typedef OSS_INT32 OffsetLL_B16;

typedef OSS_INT32 OffsetLL_B18;

typedef OSS_INT32 OffsetLL_B22;

typedef OSS_INT32 OffsetLL_B24;

typedef OSS_UINT32 PersonalClusterRadius;

typedef OSS_UINT32 ProbeSegmentNumber;

typedef OSS_INT32 RadiusOfCurvature;

typedef OSS_UINT32 Radius_B12;

typedef OSS_UINT32 RegionId;

typedef OSS_UINT32 RequestID;

typedef OSS_UINT32 RoadSegmentID;

typedef OSS_INT32 RoadwayCrownAngle;

typedef OSS_INT32 Scale_B12;

typedef OSS_UINT32 SecondOfTime;

typedef OSS_UINT32 ParkingAreaID;

typedef OSS_UINT32 SignPrority;

typedef OSS_UINT32 SpeedAdvice;

typedef OSS_UINT32 SSPindex;

typedef OSS_UINT32 StationID;

typedef OSS_INT32 SteeringWheelAngleRateOfChange;

typedef OSS_UINT32 SunSensor;

typedef OSS_UINT32 TermDistance;

typedef OSS_UINT32 TermTime;

typedef OSS_UINT32 ThrottlePosition;

typedef OSS_UINT32 TimeIntervalConfidence;

typedef OSS_UINT32 TimeMark;

typedef OSS_UINT32 TimeOffset;

typedef OSS_UINT32 TrailerMass;

typedef OSS_UINT32 VehicleHeight;

typedef OSS_UINT32 VehicleMass;

typedef OSS_UINT32 Velocity;

typedef OSS_INT32 VertOffset_B07;

typedef OSS_INT32 VertOffset_B08;

typedef OSS_INT32 VertOffset_B09;

typedef OSS_INT32 VertOffset_B10;

typedef OSS_INT32 VertOffset_B11;

typedef OSS_INT32 VertOffset_B12;

typedef OSS_UINT32 WiperRate;

typedef OSS_UINT32 ZoneLength;

typedef OSS_UINT32 Zoom;

typedef OSS_INT32 AltitudeValue;

typedef OSS_UINT32 Day;

typedef OSS_INT32 DegreesLat;

typedef OSS_INT32 DegreesLong;

typedef OSS_UINT32 Hour;

typedef OSS_INT32 LatitudeDMS;

typedef OSS_INT32 LongitudeDMS;

typedef OSS_UINT32 MaxTimetoChange;

typedef OSS_UINT32 MinTimetoChange;

typedef OSS_UINT32 Minute;

typedef OSS_UINT32 MinutesAngle;

typedef OSS_UINT32 Month;

typedef OSS_UINT32 Second;

typedef OSS_UINT32 SecondsAngle;

typedef OSS_UINT32 TenthSecond;

typedef OSS_UINT32 TimeRemaining;

typedef OSS_UINT32 Year;

typedef OSS_UINT32 EssMobileFriction;

typedef OSS_UINT32 EssPrecipRate;

typedef OSS_UINT32 EssSolarRadiation;

typedef OSS_UINT32 ITIScodes;

typedef OssString CodeWord;

typedef OssBitString ExteriorLights;

typedef OssString FurtherInfoID;

typedef OssBitString GNSSstatus;

typedef OssBitString HeadingSlice;

typedef OssBitString IntersectionStatusObject;

typedef ossBoolean IsDolly;

typedef OssBitString LaneAttributes_Barrier;

typedef OssBitString LaneAttributes_Bike;

typedef OssBitString LaneAttributes_Crosswalk;

typedef OssBitString LaneAttributes_Parking;

typedef OssBitString LaneAttributes_Sidewalk;

typedef OssBitString LaneAttributes_Striping;

typedef OssBitString LaneAttributes_TrackedVehicle;

typedef OssBitString LaneAttributes_Vehicle;

typedef OssBitString LaneDirection;

typedef OssBitString LaneSharing;

typedef OssString MessageBLOB;

typedef OssString MsgCRC;

typedef OssString NMEA_Payload;

typedef OssString PayloadData;

typedef ossBoolean PedestrianBicycleDetect;

typedef OssBitString PersonalAssistive;

typedef ossBoolean PersonalCrossingInProgress;

typedef ossBoolean PersonalCrossingRequest;

typedef OssBitString PersonalDeviceUsageState;

typedef ossBoolean PivotingAllowed;

typedef OssString Priority;

typedef OssBitString PrivilegedEventFlags;

typedef OssBitString PublicSafetyAndRoadWorkerActivity;

typedef OssBitString PublicSafetyDirectingTrafficSubType;

typedef OssString RTCMmessage;

typedef OssString SignalReqScheme;

typedef OssBitString TransitStatus;

typedef OssBitString TransitVehicleStatus;

typedef OssString UniqueMSGID;

typedef OssBitString UserSizeAndBehaviour;

typedef OssBitString VehicleEventFlags;

typedef OssBitString VerticalAccelerationThreshold;

typedef OssString VINstring;

typedef ossBoolean WaitOnStopline;

class OSS_PUBLIC DDate   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 year;
    typedef OSS_UINT32 month;
    typedef OSS_UINT32 day;

    DDate();
    DDate(const DDate &);
    DDate(year, month, day);

    DDate & operator = (const DDate &);
    int operator == (const DDate &) const;
    int operator != (const DDate &) const;

    year & get_year();
    year get_year() const;
    void set_year(year);

    month & get_month();
    month get_month() const;
    void set_month(month);

    day & get_day();
    day get_day() const;
    void set_day(day);
private:
    year year_field;
    month month_field;
    day day_field;
};

class OSS_PUBLIC DDateTime   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 year;
    typedef OSS_UINT32 month;
    typedef OSS_UINT32 day;
    typedef OSS_UINT32 hour;
    typedef OSS_UINT32 minute;
    typedef OSS_UINT32 second;
    typedef OSS_INT32 offset;

    DDateTime();
    DDateTime(const DDateTime &);
    DDateTime(year, month, day, hour, minute, second, offset);

    DDateTime & operator = (const DDateTime &);
    int operator == (const DDateTime &) const;
    int operator != (const DDateTime &) const;

    year *get_year();
    const year *get_year() const;
    void set_year(year);
    int year_is_present() const;
    void omit_year();

    month *get_month();
    const month *get_month() const;
    void set_month(month);
    int month_is_present() const;
    void omit_month();

    day *get_day();
    const day *get_day() const;
    void set_day(day);
    int day_is_present() const;
    void omit_day();

    hour *get_hour();
    const hour *get_hour() const;
    void set_hour(hour);
    int hour_is_present() const;
    void omit_hour();

    minute *get_minute();
    const minute *get_minute() const;
    void set_minute(minute);
    int minute_is_present() const;
    void omit_minute();

    second *get_second();
    const second *get_second() const;
    void set_second(second);
    int second_is_present() const;
    void omit_second();

    offset *get_offset();
    const offset *get_offset() const;
    void set_offset(offset);
    int offset_is_present() const;
    void omit_offset();
private:
    OSS_UINT32 bit_mask;
    year year_field;
    month month_field;
    day day_field;
    hour hour_field;
    minute minute_field;
    second second_field;
    offset offset_field;
};

class OSS_PUBLIC DFullTime   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 year;
    typedef OSS_UINT32 month;
    typedef OSS_UINT32 day;
    typedef OSS_UINT32 hour;
    typedef OSS_UINT32 minute;

    DFullTime();
    DFullTime(const DFullTime &);
    DFullTime(year, month, day, hour, minute);

    DFullTime & operator = (const DFullTime &);
    int operator == (const DFullTime &) const;
    int operator != (const DFullTime &) const;

    year & get_year();
    year get_year() const;
    void set_year(year);

    month & get_month();
    month get_month() const;
    void set_month(month);

    day & get_day();
    day get_day() const;
    void set_day(day);

    hour & get_hour();
    hour get_hour() const;
    void set_hour(hour);

    minute & get_minute();
    minute get_minute() const;
    void set_minute(minute);
private:
    year year_field;
    month month_field;
    day day_field;
    hour hour_field;
    minute minute_field;
};

class OSS_PUBLIC DMonthDay   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 month;
    typedef OSS_UINT32 day;

    DMonthDay();
    DMonthDay(const DMonthDay &);
    DMonthDay(month, day);

    DMonthDay & operator = (const DMonthDay &);
    int operator == (const DMonthDay &) const;
    int operator != (const DMonthDay &) const;

    month & get_month();
    month get_month() const;
    void set_month(month);

    day & get_day();
    day get_day() const;
    void set_day(day);
private:
    month month_field;
    day day_field;
};

class OSS_PUBLIC DTime   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 hour;
    typedef OSS_UINT32 minute;
    typedef OSS_UINT32 second;
    typedef OSS_INT32 offset;

    DTime();
    DTime(const DTime &);
    DTime(hour, minute, second, offset);
    DTime(hour, minute, second);

    DTime & operator = (const DTime &);
    int operator == (const DTime &) const;
    int operator != (const DTime &) const;

    hour & get_hour();
    hour get_hour() const;
    void set_hour(hour);

    minute & get_minute();
    minute get_minute() const;
    void set_minute(minute);

    second & get_second();
    second get_second() const;
    void set_second(second);

    offset *get_offset();
    const offset *get_offset() const;
    void set_offset(offset);
    int offset_is_present() const;
    void omit_offset();
private:
    OSS_UINT32 bit_mask;
    hour hour_field;
    minute minute_field;
    second second_field;
    offset offset_field;
};

class OSS_PUBLIC DYearMonth   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 year;
    typedef OSS_UINT32 month;

    DYearMonth();
    DYearMonth(const DYearMonth &);
    DYearMonth(year, month);

    DYearMonth & operator = (const DYearMonth &);
    int operator == (const DYearMonth &) const;
    int operator != (const DYearMonth &) const;

    year & get_year();
    year get_year() const;
    void set_year(year);

    month & get_month();
    month get_month() const;
    void set_month(month);
private:
    year year_field;
    month month_field;
};

class OSS_PUBLIC PrivilegedEvents   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 sspRights;
    typedef OssBitString event;

    PrivilegedEvents();
    PrivilegedEvents(const PrivilegedEvents &);
    PrivilegedEvents(sspRights, const event &);

    PrivilegedEvents & operator = (const PrivilegedEvents &);
    int operator == (const PrivilegedEvents &) const;
    int operator != (const PrivilegedEvents &) const;

    sspRights & get_sspRights();
    sspRights get_sspRights() const;
    void set_sspRights(sspRights);

    event & get_event();
    const event & get_event() const;
    void set_event(const event &);
private:
    sspRights sspRights_field;
    event event_field;
};

class OSS_PUBLIC EmergencyDetails   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 sspRights;
    typedef enum SirenInUse sirenUse;
    typedef enum LightbarInUse lightsUse;
    typedef enum MultiVehicleResponse multi;
    typedef PrivilegedEvents events;
    typedef enum ResponseType responseType;

    EmergencyDetails();
    EmergencyDetails(const EmergencyDetails &);
    EmergencyDetails(sspRights, sirenUse, lightsUse, multi, const events &, responseType);
    EmergencyDetails(sspRights, sirenUse, lightsUse, multi);

    EmergencyDetails & operator = (const EmergencyDetails &);
    int operator == (const EmergencyDetails &) const;
    int operator != (const EmergencyDetails &) const;

    sspRights & get_sspRights();
    sspRights get_sspRights() const;
    void set_sspRights(sspRights);

    sirenUse & get_sirenUse();
    sirenUse get_sirenUse() const;
    void set_sirenUse(sirenUse);

    lightsUse & get_lightsUse();
    lightsUse get_lightsUse() const;
    void set_lightsUse(lightsUse);

    multi & get_multi();
    multi get_multi() const;
    void set_multi(multi);

    events *get_events();
    const events *get_events() const;
    void set_events(const events &);
    int events_is_present() const;
    void omit_events();

    responseType *get_responseType();
    const responseType *get_responseType() const;
    void set_responseType(responseType);
    int responseType_is_present() const;
    void omit_responseType();
private:
    OSS_UINT32 bit_mask;
    sspRights sspRights_field;
    sirenUse sirenUse_field;
    lightsUse lightsUse_field;
    multi multi_field;
    events events_field;
    responseType responseType_field;
};

class OSS_PUBLIC TransmissionAndSpeed   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef enum TransmissionState transmisson;
    typedef OSS_UINT32 speed;

    TransmissionAndSpeed();
    TransmissionAndSpeed(const TransmissionAndSpeed &);
    TransmissionAndSpeed(transmisson, speed);

    TransmissionAndSpeed & operator = (const TransmissionAndSpeed &);
    int operator == (const TransmissionAndSpeed &) const;
    int operator != (const TransmissionAndSpeed &) const;

    transmisson & get_transmisson();
    transmisson get_transmisson() const;
    void set_transmisson(transmisson);

    speed & get_speed();
    speed get_speed() const;
    void set_speed(speed);
private:
    transmisson transmisson_field;
    speed speed_field;
};

class OSS_PUBLIC PositionConfidenceSet   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef enum PositionConfidence pos;
    typedef enum ElevationConfidence elevation;

    PositionConfidenceSet();
    PositionConfidenceSet(const PositionConfidenceSet &);
    PositionConfidenceSet(pos, elevation);

    PositionConfidenceSet & operator = (const PositionConfidenceSet &);
    int operator == (const PositionConfidenceSet &) const;
    int operator != (const PositionConfidenceSet &) const;

    pos & get_pos();
    pos get_pos() const;
    void set_pos(pos);

    elevation & get_elevation();
    elevation get_elevation() const;
    void set_elevation(elevation);
private:
    pos pos_field;
    elevation elevation_field;
};

class OSS_PUBLIC SpeedandHeadingandThrottleConfidence   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef enum HeadingConfidence heading;
    typedef enum SpeedConfidence speed;
    typedef enum ThrottleConfidence throttle;

    SpeedandHeadingandThrottleConfidence();
    SpeedandHeadingandThrottleConfidence(const SpeedandHeadingandThrottleConfidence &);
    SpeedandHeadingandThrottleConfidence(heading, speed, throttle);

    SpeedandHeadingandThrottleConfidence & operator = (const SpeedandHeadingandThrottleConfidence &);
    int operator == (const SpeedandHeadingandThrottleConfidence &) const;
    int operator != (const SpeedandHeadingandThrottleConfidence &) const;

    heading & get_heading();
    heading get_heading() const;
    void set_heading(heading);

    speed & get_speed();
    speed get_speed() const;
    void set_speed(speed);

    throttle & get_throttle();
    throttle get_throttle() const;
    void set_throttle(throttle);
private:
    heading heading_field;
    speed speed_field;
    throttle throttle_field;
};

class OSS_PUBLIC FullPositionVector   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef DDateTime utcTime;
    typedef OSS_INT32 FullPositionVector_long;
    typedef OSS_INT32 lat;
    typedef OSS_INT32 elevation;
    typedef OSS_UINT32 heading;
    typedef TransmissionAndSpeed speed;
    typedef PositionAccuracy posAccuracy;
    typedef enum TimeConfidence timeConfidence;
    typedef PositionConfidenceSet posConfidence;
    typedef SpeedandHeadingandThrottleConfidence speedConfidence;

    FullPositionVector();
    FullPositionVector(const FullPositionVector &);
    FullPositionVector(const utcTime &, FullPositionVector_long, lat, elevation, 
	heading, const speed &, const posAccuracy &, timeConfidence, const posConfidence &, 
	const speedConfidence &);
    FullPositionVector(FullPositionVector_long, lat);

    FullPositionVector & operator = (const FullPositionVector &);
    int operator == (const FullPositionVector &) const;
    int operator != (const FullPositionVector &) const;

    utcTime *get_utcTime();
    const utcTime *get_utcTime() const;
    void set_utcTime(const utcTime &);
    int utcTime_is_present() const;
    void omit_utcTime();

    FullPositionVector_long & get_FullPositionVector_long();
    FullPositionVector_long get_FullPositionVector_long() const;
    void set_FullPositionVector_long(FullPositionVector_long);

    lat & get_lat();
    lat get_lat() const;
    void set_lat(lat);

    elevation *get_elevation();
    const elevation *get_elevation() const;
    void set_elevation(elevation);
    int elevation_is_present() const;
    void omit_elevation();

    heading *get_heading();
    const heading *get_heading() const;
    void set_heading(heading);
    int heading_is_present() const;
    void omit_heading();

    speed *get_speed();
    const speed *get_speed() const;
    void set_speed(const speed &);
    int speed_is_present() const;
    void omit_speed();

    posAccuracy *get_posAccuracy();
    const posAccuracy *get_posAccuracy() const;
    void set_posAccuracy(const posAccuracy &);
    int posAccuracy_is_present() const;
    void omit_posAccuracy();

    timeConfidence *get_timeConfidence();
    const timeConfidence *get_timeConfidence() const;
    void set_timeConfidence(timeConfidence);
    int timeConfidence_is_present() const;
    void omit_timeConfidence();

    posConfidence *get_posConfidence();
    const posConfidence *get_posConfidence() const;
    void set_posConfidence(const posConfidence &);
    int posConfidence_is_present() const;
    void omit_posConfidence();

    speedConfidence *get_speedConfidence();
    const speedConfidence *get_speedConfidence() const;
    void set_speedConfidence(const speedConfidence &);
    int speedConfidence_is_present() const;
    void omit_speedConfidence();
private:
    OSS_UINT32 bit_mask;
    utcTime utcTime_field;
    FullPositionVector_long FullPositionVector_long_field;
    lat lat_field;
    elevation elevation_field;
    heading heading_field;
    speed speed_field;
    posAccuracy posAccuracy_field;
    timeConfidence timeConfidence_field;
    posConfidence posConfidence_field;
    speedConfidence speedConfidence_field;
};

class OSS_PUBLIC Position3D   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_INT32 lat;
    typedef OSS_INT32 Position3D_long;
    typedef OSS_INT32 elevation;

    Position3D();
    Position3D(const Position3D &);
    Position3D(lat, Position3D_long, elevation);
    Position3D(lat, Position3D_long);

    Position3D & operator = (const Position3D &);
    int operator == (const Position3D &) const;
    int operator != (const Position3D &) const;

    lat & get_lat();
    lat get_lat() const;
    void set_lat(lat);

    Position3D_long & get_Position3D_long();
    Position3D_long get_Position3D_long() const;
    void set_Position3D_long(Position3D_long);

    elevation *get_elevation();
    const elevation *get_elevation() const;
    void set_elevation(elevation);
    int elevation_is_present() const;
    void omit_elevation();
private:
    OSS_UINT32 bit_mask;
    lat lat_field;
    Position3D_long Position3D_long_field;
    elevation elevation_field;
};

class OSS_PUBLIC RegulatorySpeedLimit;

class OSS_PUBLIC __shared2 : public OssList  /* SEQUENCE OF */
{
public:
    typedef RegulatorySpeedLimit component;

    __shared2();
    __shared2(const __shared2 &);
    ~__shared2();

    __shared2 & operator = (const __shared2 &);
    int operator == (const __shared2 &) const;
    int operator != (const __shared2 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared2 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared2 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared2 *extract_after(OssIndex, OssIndex);
};

typedef __shared2 SpeedLimitList;

class OSS_PUBLIC GenericLane;

class OSS_PUBLIC __shared9 : public OssList  /* SEQUENCE OF */
{
public:
    typedef GenericLane component;

    __shared9();
    __shared9(const __shared9 &);
    ~__shared9();

    __shared9 & operator = (const __shared9 &);
    int operator == (const __shared9 &) const;
    int operator != (const __shared9 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared9 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared9 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared9 *extract_after(OssIndex, OssIndex);
};

typedef __shared9 LaneList;

class OSS_PUBLIC SignalControlZone;

class OSS_PUBLIC __shared10 : public OssList  /* SEQUENCE OF */
{
public:
    typedef SignalControlZone component;

    __shared10();
    __shared10(const __shared10 &);
    ~__shared10();

    __shared10 & operator = (const __shared10 &);
    int operator == (const __shared10 &) const;
    int operator != (const __shared10 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared10 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared10 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared10 *extract_after(OssIndex, OssIndex);
};

typedef __shared10 PreemptPriorityList;

class OSS_PUBLIC IntersectionGeometry   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString name;
    typedef __shared1 id;
    typedef OSS_UINT32 revision;
    typedef Position3D refPoint;
    typedef OSS_UINT32 laneWidth;
    typedef __shared2 speedLimits;
    typedef __shared9 laneSet;
    typedef __shared10 preemptPriorityData;

    IntersectionGeometry();
    IntersectionGeometry(const IntersectionGeometry &);
    IntersectionGeometry(const name &, const id &, revision, const refPoint &, laneWidth, 
	const speedLimits &, const laneSet &, const preemptPriorityData &);
    IntersectionGeometry(const id &, revision, const refPoint &, const laneSet &);

    IntersectionGeometry & operator = (const IntersectionGeometry &);
    int operator == (const IntersectionGeometry &) const;
    int operator != (const IntersectionGeometry &) const;

    name *get_name();
    const name *get_name() const;
    void set_name(const name &);
    int name_is_present() const;
    void omit_name();

    id & get_id();
    const id & get_id() const;
    void set_id(const id &);

    revision & get_revision();
    revision get_revision() const;
    void set_revision(revision);

    refPoint & get_refPoint();
    const refPoint & get_refPoint() const;
    void set_refPoint(const refPoint &);

    laneWidth *get_laneWidth();
    const laneWidth *get_laneWidth() const;
    void set_laneWidth(laneWidth);
    int laneWidth_is_present() const;
    void omit_laneWidth();

    speedLimits *get_speedLimits();
    const speedLimits *get_speedLimits() const;
    void set_speedLimits(const speedLimits &);
    int speedLimits_is_present() const;
    void omit_speedLimits();

    laneSet & get_laneSet();
    const laneSet & get_laneSet() const;
    void set_laneSet(const laneSet &);

    preemptPriorityData *get_preemptPriorityData();
    const preemptPriorityData *get_preemptPriorityData() const;
    void set_preemptPriorityData(const preemptPriorityData &);
    int preemptPriorityData_is_present() const;
    void omit_preemptPriorityData();
private:
    OSS_UINT32 bit_mask;
    name name_field;
    id id_field;
    revision revision_field;
    refPoint refPoint_field;
    laneWidth laneWidth_field;
    speedLimits speedLimits_field;
    laneSet laneSet_field;
    preemptPriorityData preemptPriorityData_field;
};

class OSS_PUBLIC IntersectionGeometryList : public OssList  /* SEQUENCE OF */
{
public:
    typedef IntersectionGeometry component;

    IntersectionGeometryList();
    IntersectionGeometryList(const IntersectionGeometryList &);
    ~IntersectionGeometryList();

    IntersectionGeometryList & operator = (const IntersectionGeometryList &);
    int operator == (const IntersectionGeometryList &) const;
    int operator != (const IntersectionGeometryList &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(IntersectionGeometryList *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, IntersectionGeometryList *);

    int remove_front();
    int remove_after(OssIndex);

    IntersectionGeometryList *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC __shared8 : public OssList  /* SEQUENCE OF */
{
public:
    typedef OSS_UINT32 component;

    __shared8();
    __shared8(const __shared8 &);
    ~__shared8();

    __shared8 & operator = (const __shared8 &);
    int operator == (const __shared8 &) const;
    int operator != (const __shared8 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(component );
    OssIndex prepend(__shared8 *);
    OssIndex insert_after(OssIndex, component );
    OssIndex insert_after(OssIndex, __shared8 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared8 *extract_after(OssIndex, OssIndex);
};

typedef __shared8 OverlayLaneList;

typedef __shared8 EnabledLaneList;

class OSS_PUBLIC MovementState;

class OSS_PUBLIC __shared13 : public OssList  /* SEQUENCE OF */
{
public:
    typedef MovementState component;

    __shared13();
    __shared13(const __shared13 &);
    ~__shared13();

    __shared13 & operator = (const __shared13 &);
    int operator == (const __shared13 &) const;
    int operator != (const __shared13 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared13 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared13 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared13 *extract_after(OssIndex, OssIndex);
};

typedef __shared13 MovementList;

class OSS_PUBLIC ConnectionManeuverAssist;

class OSS_PUBLIC __shared12 : public OssList  /* SEQUENCE OF */
{
public:
    typedef ConnectionManeuverAssist component;

    __shared12();
    __shared12(const __shared12 &);
    ~__shared12();

    __shared12 & operator = (const __shared12 &);
    int operator == (const __shared12 &) const;
    int operator != (const __shared12 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared12 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared12 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared12 *extract_after(OssIndex, OssIndex);
};

typedef __shared12 ManeuverAssistList;

class OSS_PUBLIC IntersectionState   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString name;
    typedef __shared1 id;
    typedef OSS_UINT32 revision;
    typedef OssBitString status;
    typedef OSS_UINT32 moy;
    typedef OSS_UINT32 timeStamp;
    typedef __shared8 enabledLanes;
    typedef __shared13 states;
    typedef __shared12 maneuverAssistList;

    IntersectionState();
    IntersectionState(const IntersectionState &);
    IntersectionState(const name &, const id &, revision, const status &, moy, timeStamp, 
	const enabledLanes &, const states &, const maneuverAssistList &);
    IntersectionState(const id &, revision, const status &, const states &);

    IntersectionState & operator = (const IntersectionState &);
    int operator == (const IntersectionState &) const;
    int operator != (const IntersectionState &) const;

    name *get_name();
    const name *get_name() const;
    void set_name(const name &);
    int name_is_present() const;
    void omit_name();

    id & get_id();
    const id & get_id() const;
    void set_id(const id &);

    revision & get_revision();
    revision get_revision() const;
    void set_revision(revision);

    status & get_status();
    const status & get_status() const;
    void set_status(const status &);

    moy *get_moy();
    const moy *get_moy() const;
    void set_moy(moy);
    int moy_is_present() const;
    void omit_moy();

    timeStamp *get_timeStamp();
    const timeStamp *get_timeStamp() const;
    void set_timeStamp(timeStamp);
    int timeStamp_is_present() const;
    void omit_timeStamp();

    enabledLanes *get_enabledLanes();
    const enabledLanes *get_enabledLanes() const;
    void set_enabledLanes(const enabledLanes &);
    int enabledLanes_is_present() const;
    void omit_enabledLanes();

    states & get_states();
    const states & get_states() const;
    void set_states(const states &);

    maneuverAssistList *get_maneuverAssistList();
    const maneuverAssistList *get_maneuverAssistList() const;
    void set_maneuverAssistList(const maneuverAssistList &);
    int maneuverAssistList_is_present() const;
    void omit_maneuverAssistList();
private:
    OSS_UINT32 bit_mask;
    name name_field;
    id id_field;
    revision revision_field;
    status status_field;
    moy moy_field;
    timeStamp timeStamp_field;
    enabledLanes enabledLanes_field;
    states states_field;
    maneuverAssistList maneuverAssistList_field;
};

class OSS_PUBLIC IntersectionStateList : public OssList  /* SEQUENCE OF */
{
public:
    typedef IntersectionState component;

    IntersectionStateList();
    IntersectionStateList(const IntersectionStateList &);
    ~IntersectionStateList();

    IntersectionStateList & operator = (const IntersectionStateList &);
    int operator == (const IntersectionStateList &) const;
    int operator != (const IntersectionStateList &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(IntersectionStateList *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, IntersectionStateList *);

    int remove_front();
    int remove_after(OssIndex);

    IntersectionStateList *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC IntersectionAccessPoint  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	lane_chosen = 1,
	approach_chosen = 2,
	connection_chosen = 3
    };
    typedef OSS_UINT32 lane;
    typedef OSS_UINT32 approach;
    typedef OSS_UINT32 connection;

    IntersectionAccessPoint();
    IntersectionAccessPoint(const IntersectionAccessPoint &);

    IntersectionAccessPoint & operator = (const IntersectionAccessPoint &);
    int operator == (const IntersectionAccessPoint &) const;
    int operator != (const IntersectionAccessPoint &) const;

    lane *get_lane();
    const lane *get_lane() const;
    void set_lane(lane);

    approach *get_approach();
    const approach *get_approach() const;
    void set_approach(approach);

    connection *get_connection();
    const connection *get_connection() const;
    void set_connection(connection);
private:
    union {
	lane lane_field;
	approach approach_field;
	connection connection_field;
    };
};

class OSS_PUBLIC SignalControlZone   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);


    SignalControlZone();
    SignalControlZone(const SignalControlZone &);

    SignalControlZone & operator = (const SignalControlZone &);
    int operator == (const SignalControlZone &) const;
    int operator != (const SignalControlZone &) const;
private:
    char placeholder;
};

class OSS_PUBLIC TimeChangeDetails   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 startTime;
    typedef OSS_UINT32 minEndTime;
    typedef OSS_UINT32 maxEndTime;
    typedef OSS_UINT32 likelyTime;
    typedef OSS_UINT32 confidence;
    typedef OSS_UINT32 nextTime;

    TimeChangeDetails();
    TimeChangeDetails(const TimeChangeDetails &);
    TimeChangeDetails(startTime, minEndTime, maxEndTime, likelyTime, confidence, 
	nextTime);
    TimeChangeDetails(minEndTime);

    TimeChangeDetails & operator = (const TimeChangeDetails &);
    int operator == (const TimeChangeDetails &) const;
    int operator != (const TimeChangeDetails &) const;

    startTime *get_startTime();
    const startTime *get_startTime() const;
    void set_startTime(startTime);
    int startTime_is_present() const;
    void omit_startTime();

    minEndTime & get_minEndTime();
    minEndTime get_minEndTime() const;
    void set_minEndTime(minEndTime);

    maxEndTime *get_maxEndTime();
    const maxEndTime *get_maxEndTime() const;
    void set_maxEndTime(maxEndTime);
    int maxEndTime_is_present() const;
    void omit_maxEndTime();

    likelyTime *get_likelyTime();
    const likelyTime *get_likelyTime() const;
    void set_likelyTime(likelyTime);
    int likelyTime_is_present() const;
    void omit_likelyTime();

    confidence *get_confidence();
    const confidence *get_confidence() const;
    void set_confidence(confidence);
    int confidence_is_present() const;
    void omit_confidence();

    nextTime *get_nextTime();
    const nextTime *get_nextTime() const;
    void set_nextTime(nextTime);
    int nextTime_is_present() const;
    void omit_nextTime();
private:
    OSS_UINT32 bit_mask;
    startTime startTime_field;
    minEndTime minEndTime_field;
    maxEndTime maxEndTime_field;
    likelyTime likelyTime_field;
    confidence confidence_field;
    nextTime nextTime_field;
};

class OSS_PUBLIC AdvisorySpeed;

class OSS_PUBLIC __shared11 : public OssList  /* SEQUENCE OF */
{
public:
    typedef AdvisorySpeed component;

    __shared11();
    __shared11(const __shared11 &);
    ~__shared11();

    __shared11 & operator = (const __shared11 &);
    int operator == (const __shared11 &) const;
    int operator != (const __shared11 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared11 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared11 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared11 *extract_after(OssIndex, OssIndex);
};

typedef __shared11 AdvisorySpeedList;

class OSS_PUBLIC MovementEvent   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef enum MovementPhaseState eventState;
    typedef TimeChangeDetails timing;
    typedef __shared11 speeds;

    MovementEvent();
    MovementEvent(const MovementEvent &);
    MovementEvent(eventState, const timing &, const speeds &);
    MovementEvent(eventState);

    MovementEvent & operator = (const MovementEvent &);
    int operator == (const MovementEvent &) const;
    int operator != (const MovementEvent &) const;

    eventState & get_eventState();
    eventState get_eventState() const;
    void set_eventState(eventState);

    timing *get_timing();
    const timing *get_timing() const;
    void set_timing(const timing &);
    int timing_is_present() const;
    void omit_timing();

    speeds *get_speeds();
    const speeds *get_speeds() const;
    void set_speeds(const speeds &);
    int speeds_is_present() const;
    void omit_speeds();
private:
    OSS_UINT32 bit_mask;
    eventState eventState_field;
    timing timing_field;
    speeds speeds_field;
};

class OSS_PUBLIC MovementEventList : public OssList  /* SEQUENCE OF */
{
public:
    typedef MovementEvent component;

    MovementEventList();
    MovementEventList(const MovementEventList &);
    ~MovementEventList();

    MovementEventList & operator = (const MovementEventList &);
    int operator == (const MovementEventList &) const;
    int operator != (const MovementEventList &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(MovementEventList *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, MovementEventList *);

    int remove_front();
    int remove_after(OssIndex);

    MovementEventList *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC MovementState   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString movementName;
    typedef OSS_UINT32 signalGroup;
    typedef MovementEventList state_time_speed;
    typedef __shared12 maneuverAssistList;

    MovementState();
    MovementState(const MovementState &);
    MovementState(const movementName &, signalGroup, const state_time_speed &, const maneuverAssistList &);
    MovementState(signalGroup, const state_time_speed &);

    MovementState & operator = (const MovementState &);
    int operator == (const MovementState &) const;
    int operator != (const MovementState &) const;

    movementName *get_movementName();
    const movementName *get_movementName() const;
    void set_movementName(const movementName &);
    int movementName_is_present() const;
    void omit_movementName();

    signalGroup & get_signalGroup();
    signalGroup get_signalGroup() const;
    void set_signalGroup(signalGroup);

    state_time_speed & get_state_time_speed();
    const state_time_speed & get_state_time_speed() const;
    void set_state_time_speed(const state_time_speed &);

    maneuverAssistList *get_maneuverAssistList();
    const maneuverAssistList *get_maneuverAssistList() const;
    void set_maneuverAssistList(const maneuverAssistList &);
    int maneuverAssistList_is_present() const;
    void omit_maneuverAssistList();
private:
    OSS_UINT32 bit_mask;
    movementName movementName_field;
    signalGroup signalGroup_field;
    state_time_speed state_time_speed_field;
    maneuverAssistList maneuverAssistList_field;
};

class OSS_PUBLIC ConnectionManeuverAssist   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 connectionID;
    typedef OSS_UINT32 queueLength;
    typedef OSS_UINT32 availableStorageLength;
    typedef ossBoolean waitOnStop;
    typedef ossBoolean pedBicycleDetect;

    ConnectionManeuverAssist();
    ConnectionManeuverAssist(const ConnectionManeuverAssist &);
    ConnectionManeuverAssist(connectionID, queueLength, availableStorageLength, waitOnStop, 
	pedBicycleDetect);
    ConnectionManeuverAssist(connectionID);

    ConnectionManeuverAssist & operator = (const ConnectionManeuverAssist &);
    int operator == (const ConnectionManeuverAssist &) const;
    int operator != (const ConnectionManeuverAssist &) const;

    connectionID & get_connectionID();
    connectionID get_connectionID() const;
    void set_connectionID(connectionID);

    queueLength *get_queueLength();
    const queueLength *get_queueLength() const;
    void set_queueLength(queueLength);
    int queueLength_is_present() const;
    void omit_queueLength();

    availableStorageLength *get_availableStorageLength();
    const availableStorageLength *get_availableStorageLength() const;
    void set_availableStorageLength(availableStorageLength);
    int availableStorageLength_is_present() const;
    void omit_availableStorageLength();

    waitOnStop *get_waitOnStop();
    const waitOnStop *get_waitOnStop() const;
    void set_waitOnStop(waitOnStop);
    int waitOnStop_is_present() const;
    void omit_waitOnStop();

    pedBicycleDetect *get_pedBicycleDetect();
    const pedBicycleDetect *get_pedBicycleDetect() const;
    void set_pedBicycleDetect(pedBicycleDetect);
    int pedBicycleDetect_is_present() const;
    void omit_pedBicycleDetect();
private:
    OSS_UINT32 bit_mask;
    connectionID connectionID_field;
    queueLength queueLength_field;
    availableStorageLength availableStorageLength_field;
    waitOnStop waitOnStop_field;
    pedBicycleDetect pedBicycleDetect_field;
};

class OSS_PUBLIC LaneTypeAttributes  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	vehicle_chosen = 1,
	crosswalk_chosen = 2,
	bikeLane_chosen = 3,
	sidewalk_chosen = 4,
	median_chosen = 5,
	striping_chosen = 6,
	trackedVehicle_chosen = 7,
	parking_chosen = 8
    };
    typedef OssBitString vehicle;
    typedef OssBitString crosswalk;
    typedef OssBitString bikeLane;
    typedef OssBitString sidewalk;
    typedef OssBitString median;
    typedef OssBitString striping;
    typedef OssBitString trackedVehicle;
    typedef OssBitString parking;

    LaneTypeAttributes();
    LaneTypeAttributes(const LaneTypeAttributes &);
    ~LaneTypeAttributes();

    LaneTypeAttributes & operator = (const LaneTypeAttributes &);
    int operator == (const LaneTypeAttributes &) const;
    int operator != (const LaneTypeAttributes &) const;

    vehicle *get_vehicle();
    const vehicle *get_vehicle() const;
    void set_vehicle(const vehicle &);

    crosswalk *get_crosswalk();
    const crosswalk *get_crosswalk() const;
    void set_crosswalk(const crosswalk &);

    bikeLane *get_bikeLane();
    const bikeLane *get_bikeLane() const;
    void set_bikeLane(const bikeLane &);

    sidewalk *get_sidewalk();
    const sidewalk *get_sidewalk() const;
    void set_sidewalk(const sidewalk &);

    median *get_median();
    const median *get_median() const;
    void set_median(const median &);

    striping *get_striping();
    const striping *get_striping() const;
    void set_striping(const striping &);

    trackedVehicle *get_trackedVehicle();
    const trackedVehicle *get_trackedVehicle() const;
    void set_trackedVehicle(const trackedVehicle &);

    parking *get_parking();
    const parking *get_parking() const;
    void set_parking(const parking &);
private:
    union {
	OSSC::COssBitString vehicle_field;
	OSSC::COssBitString crosswalk_field;
	OSSC::COssBitString bikeLane_field;
	OSSC::COssBitString sidewalk_field;
	OSSC::COssBitString median_field;
	OSSC::COssBitString striping_field;
	OSSC::COssBitString trackedVehicle_field;
	OSSC::COssBitString parking_field;
    };
    void cleanup();
};

class OSS_PUBLIC LaneAttributes   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssBitString directionalUse;
    typedef OssBitString sharedWith;
    typedef LaneTypeAttributes laneType;

    LaneAttributes();
    LaneAttributes(const LaneAttributes &);
    LaneAttributes(const directionalUse &, const sharedWith &, const laneType &);

    LaneAttributes & operator = (const LaneAttributes &);
    int operator == (const LaneAttributes &) const;
    int operator != (const LaneAttributes &) const;

    directionalUse & get_directionalUse();
    const directionalUse & get_directionalUse() const;
    void set_directionalUse(const directionalUse &);

    sharedWith & get_sharedWith();
    const sharedWith & get_sharedWith() const;
    void set_sharedWith(const sharedWith &);

    laneType & get_laneType();
    const laneType & get_laneType() const;
    void set_laneType(const laneType &);
private:
    directionalUse directionalUse_field;
    sharedWith sharedWith_field;
    laneType laneType_field;
};

class OSS_PUBLIC NodeXY;

class OSS_PUBLIC __shared6 : public OssList  /* SEQUENCE OF */
{
public:
    typedef NodeXY component;

    __shared6();
    __shared6(const __shared6 &);
    ~__shared6();

    __shared6 & operator = (const __shared6 &);
    int operator == (const __shared6 &) const;
    int operator != (const __shared6 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared6 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared6 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared6 *extract_after(OssIndex, OssIndex);
};

typedef __shared6 NodeSetXY;

class OSS_PUBLIC __shared7  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	offsetXaxis_small_chosen = 1,
	large_chosen = 2
    };
    typedef OSS_INT32 offsetXaxis_small;
    typedef OSS_INT32 large;

    __shared7();
    __shared7(const __shared7 &);

    __shared7 & operator = (const __shared7 &);
    int operator == (const __shared7 &) const;
    int operator != (const __shared7 &) const;

    offsetXaxis_small *get_offsetXaxis_small();
    const offsetXaxis_small *get_offsetXaxis_small() const;
    void set_offsetXaxis_small(offsetXaxis_small);

    large *get_large();
    const large *get_large() const;
    void set_large(large);
private:
    union {
	offsetXaxis_small offsetXaxis_small_field;
	large large_field;
    };
};

class OSS_PUBLIC ComputedLane   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 referenceLaneId;
    typedef __shared7 offsetXaxis;
    typedef __shared7 offsetYaxis;
    typedef OSS_UINT32 rotateXY;
    typedef OSS_INT32 scaleXaxis;
    typedef OSS_INT32 scaleYaxis;

    ComputedLane();
    ComputedLane(const ComputedLane &);
    ComputedLane(referenceLaneId, const offsetXaxis &, const offsetYaxis &, rotateXY, 
	scaleXaxis, scaleYaxis);
    ComputedLane(referenceLaneId, const offsetXaxis &, const offsetYaxis &);

    ComputedLane & operator = (const ComputedLane &);
    int operator == (const ComputedLane &) const;
    int operator != (const ComputedLane &) const;

    referenceLaneId & get_referenceLaneId();
    referenceLaneId get_referenceLaneId() const;
    void set_referenceLaneId(referenceLaneId);

    offsetXaxis & get_offsetXaxis();
    const offsetXaxis & get_offsetXaxis() const;
    void set_offsetXaxis(const offsetXaxis &);

    offsetYaxis & get_offsetYaxis();
    const offsetYaxis & get_offsetYaxis() const;
    void set_offsetYaxis(const offsetYaxis &);

    rotateXY *get_rotateXY();
    const rotateXY *get_rotateXY() const;
    void set_rotateXY(rotateXY);
    int rotateXY_is_present() const;
    void omit_rotateXY();

    scaleXaxis *get_scaleXaxis();
    const scaleXaxis *get_scaleXaxis() const;
    void set_scaleXaxis(scaleXaxis);
    int scaleXaxis_is_present() const;
    void omit_scaleXaxis();

    scaleYaxis *get_scaleYaxis();
    const scaleYaxis *get_scaleYaxis() const;
    void set_scaleYaxis(scaleYaxis);
    int scaleYaxis_is_present() const;
    void omit_scaleYaxis();
private:
    OSS_UINT32 bit_mask;
    referenceLaneId referenceLaneId_field;
    offsetXaxis offsetXaxis_field;
    offsetYaxis offsetYaxis_field;
    rotateXY rotateXY_field;
    scaleXaxis scaleXaxis_field;
    scaleYaxis scaleYaxis_field;
};

class OSS_PUBLIC NodeListXY  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	nodes_chosen = 1,
	computed_chosen = 2
    };
    typedef __shared6 nodes;
    typedef ComputedLane computed;

    NodeListXY();
    NodeListXY(const NodeListXY &);
    ~NodeListXY();

    NodeListXY & operator = (const NodeListXY &);
    int operator == (const NodeListXY &) const;
    int operator != (const NodeListXY &) const;

    nodes *get_nodes();
    const nodes *get_nodes() const;
    void set_nodes(const nodes &);

    computed *get_computed();
    const computed *get_computed() const;
    void set_computed(const computed &);
private:
    union {
	void *nodes_field;
	computed *computed_field;
    };
    void cleanup();
};

class OSS_PUBLIC GenericLane   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 laneID;
    typedef OssString name;
    typedef OSS_UINT32 ingressApproach;
    typedef OSS_UINT32 egressApproach;
    typedef LaneAttributes laneAttributes;
    typedef OssBitString maneuvers;
    typedef NodeListXY nodeList;
    typedef ConnectsToList connectsTo;
    typedef __shared8 overlays;

    GenericLane();
    GenericLane(const GenericLane &);
    GenericLane(laneID, const name &, ingressApproach, egressApproach, const laneAttributes &, 
	const maneuvers &, const nodeList &, const connectsTo &, const overlays &);
    GenericLane(laneID, const laneAttributes &, const nodeList &);

    GenericLane & operator = (const GenericLane &);
    int operator == (const GenericLane &) const;
    int operator != (const GenericLane &) const;

    laneID & get_laneID();
    laneID get_laneID() const;
    void set_laneID(laneID);

    name *get_name();
    const name *get_name() const;
    void set_name(const name &);
    int name_is_present() const;
    void omit_name();

    ingressApproach *get_ingressApproach();
    const ingressApproach *get_ingressApproach() const;
    void set_ingressApproach(ingressApproach);
    int ingressApproach_is_present() const;
    void omit_ingressApproach();

    egressApproach *get_egressApproach();
    const egressApproach *get_egressApproach() const;
    void set_egressApproach(egressApproach);
    int egressApproach_is_present() const;
    void omit_egressApproach();

    laneAttributes & get_laneAttributes();
    const laneAttributes & get_laneAttributes() const;
    void set_laneAttributes(const laneAttributes &);

    maneuvers *get_maneuvers();
    const maneuvers *get_maneuvers() const;
    void set_maneuvers(const maneuvers &);
    int maneuvers_is_present() const;
    void omit_maneuvers();

    nodeList & get_nodeList();
    const nodeList & get_nodeList() const;
    void set_nodeList(const nodeList &);

    connectsTo *get_connectsTo();
    const connectsTo *get_connectsTo() const;
    void set_connectsTo(const connectsTo &);
    int connectsTo_is_present() const;
    void omit_connectsTo();

    overlays *get_overlays();
    const overlays *get_overlays() const;
    void set_overlays(const overlays &);
    int overlays_is_present() const;
    void omit_overlays();
private:
    OSS_UINT32 bit_mask;
    laneID laneID_field;
    name name_field;
    ingressApproach ingressApproach_field;
    egressApproach egressApproach_field;
    laneAttributes laneAttributes_field;
    maneuvers maneuvers_field;
    nodeList nodeList_field;
    connectsTo connectsTo_field;
    overlays overlays_field;
};

class OSS_PUBLIC LaneDataAttribute  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	pathEndPointAngle_chosen = 1,
	laneCrownPointCenter_chosen = 2,
	laneCrownPointLeft_chosen = 3,
	laneCrownPointRight_chosen = 4,
	laneAngle_chosen = 5,
	speedLimits_chosen = 6
    };
    typedef OSS_INT32 pathEndPointAngle;
    typedef OSS_INT32 laneCrownPointCenter;
    typedef OSS_INT32 laneCrownPointLeft;
    typedef OSS_INT32 laneCrownPointRight;
    typedef OSS_INT32 laneAngle;
    typedef __shared2 speedLimits;

    LaneDataAttribute();
    LaneDataAttribute(const LaneDataAttribute &);
    ~LaneDataAttribute();

    LaneDataAttribute & operator = (const LaneDataAttribute &);
    int operator == (const LaneDataAttribute &) const;
    int operator != (const LaneDataAttribute &) const;

    pathEndPointAngle *get_pathEndPointAngle();
    const pathEndPointAngle *get_pathEndPointAngle() const;
    void set_pathEndPointAngle(pathEndPointAngle);

    laneCrownPointCenter *get_laneCrownPointCenter();
    const laneCrownPointCenter *get_laneCrownPointCenter() const;
    void set_laneCrownPointCenter(laneCrownPointCenter);

    laneCrownPointLeft *get_laneCrownPointLeft();
    const laneCrownPointLeft *get_laneCrownPointLeft() const;
    void set_laneCrownPointLeft(laneCrownPointLeft);

    laneCrownPointRight *get_laneCrownPointRight();
    const laneCrownPointRight *get_laneCrownPointRight() const;
    void set_laneCrownPointRight(laneCrownPointRight);

    laneAngle *get_laneAngle();
    const laneAngle *get_laneAngle() const;
    void set_laneAngle(laneAngle);

    speedLimits *get_speedLimits();
    const speedLimits *get_speedLimits() const;
    void set_speedLimits(const speedLimits &);
private:
    union {
	pathEndPointAngle pathEndPointAngle_field;
	laneCrownPointCenter laneCrownPointCenter_field;
	laneCrownPointLeft laneCrownPointLeft_field;
	laneCrownPointRight laneCrownPointRight_field;
	laneAngle laneAngle_field;
	void *speedLimits_field;
    };
    void cleanup();
};

class OSS_PUBLIC LaneDataAttributeList : public OssList  /* SEQUENCE OF */
{
public:
    typedef LaneDataAttribute component;

    LaneDataAttributeList();
    LaneDataAttributeList(const LaneDataAttributeList &);
    ~LaneDataAttributeList();

    LaneDataAttributeList & operator = (const LaneDataAttributeList &);
    int operator == (const LaneDataAttributeList &) const;
    int operator != (const LaneDataAttributeList &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(LaneDataAttributeList *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, LaneDataAttributeList *);

    int remove_front();
    int remove_after(OssIndex);

    LaneDataAttributeList *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC BasicSafetyMessage   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef BSMcoreData coreData;

    BasicSafetyMessage();
    BasicSafetyMessage(const BasicSafetyMessage &);
    BasicSafetyMessage(const coreData &);

    BasicSafetyMessage & operator = (const BasicSafetyMessage &);
    int operator == (const BasicSafetyMessage &) const;
    int operator != (const BasicSafetyMessage &) const;

    coreData & get_coreData();
    const coreData & get_coreData() const;
    void set_coreData(const coreData &);
private:
    coreData coreData_field;
};

class OSS_PUBLIC RoadSideAlert   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 msgCnt;
    typedef OSS_UINT32 timeStamp;
    typedef OssString priority;
    typedef OssBitString heading;
    typedef enum Extent extent;
    typedef FullPositionVector position;
    typedef OssString furtherInfoID;

    RoadSideAlert();
    RoadSideAlert(const RoadSideAlert &);
    RoadSideAlert(msgCnt, timeStamp, const priority &, const heading &, extent, const position &, 
	const furtherInfoID &);
    RoadSideAlert(msgCnt);

    RoadSideAlert & operator = (const RoadSideAlert &);
    int operator == (const RoadSideAlert &) const;
    int operator != (const RoadSideAlert &) const;

    msgCnt & get_msgCnt();
    msgCnt get_msgCnt() const;
    void set_msgCnt(msgCnt);

    timeStamp *get_timeStamp();
    const timeStamp *get_timeStamp() const;
    void set_timeStamp(timeStamp);
    int timeStamp_is_present() const;
    void omit_timeStamp();

    priority *get_priority();
    const priority *get_priority() const;
    void set_priority(const priority &);
    int priority_is_present() const;
    void omit_priority();

    heading *get_heading();
    const heading *get_heading() const;
    void set_heading(const heading &);
    int heading_is_present() const;
    void omit_heading();

    extent *get_extent();
    const extent *get_extent() const;
    void set_extent(extent);
    int extent_is_present() const;
    void omit_extent();

    position *get_position();
    const position *get_position() const;
    void set_position(const position &);
    int position_is_present() const;
    void omit_position();

    furtherInfoID *get_furtherInfoID();
    const furtherInfoID *get_furtherInfoID() const;
    void set_furtherInfoID(const furtherInfoID &);
    int furtherInfoID_is_present() const;
    void omit_furtherInfoID();
private:
    OSS_UINT32 bit_mask;
    msgCnt msgCnt_field;
    timeStamp timeStamp_field;
    priority priority_field;
    heading heading_field;
    extent extent_field;
    position position_field;
    furtherInfoID furtherInfoID_field;
};

class OSS_PUBLIC EmergencyVehicleAlert   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 timeStamp;
    typedef OssString id;
    typedef RoadSideAlert rsaMsg;
    typedef enum ResponseType responseType;
    typedef EmergencyDetails details;
    typedef OSS_UINT32 mass;
    typedef enum VehicleType basicType;

    EmergencyVehicleAlert();
    EmergencyVehicleAlert(const EmergencyVehicleAlert &);
    EmergencyVehicleAlert(timeStamp, const id &, const rsaMsg &, responseType, const details &, 
	mass, basicType);
    EmergencyVehicleAlert(const rsaMsg &);

    EmergencyVehicleAlert & operator = (const EmergencyVehicleAlert &);
    int operator == (const EmergencyVehicleAlert &) const;
    int operator != (const EmergencyVehicleAlert &) const;

    timeStamp *get_timeStamp();
    const timeStamp *get_timeStamp() const;
    void set_timeStamp(timeStamp);
    int timeStamp_is_present() const;
    void omit_timeStamp();

    id *get_id();
    const id *get_id() const;
    void set_id(const id &);
    int id_is_present() const;
    void omit_id();

    rsaMsg & get_rsaMsg();
    const rsaMsg & get_rsaMsg() const;
    void set_rsaMsg(const rsaMsg &);

    responseType *get_responseType();
    const responseType *get_responseType() const;
    void set_responseType(responseType);
    int responseType_is_present() const;
    void omit_responseType();

    details *get_details();
    const details *get_details() const;
    void set_details(const details &);
    int details_is_present() const;
    void omit_details();

    mass *get_mass();
    const mass *get_mass() const;
    void set_mass(mass);
    int mass_is_present() const;
    void omit_mass();

    basicType *get_basicType();
    const basicType *get_basicType() const;
    void set_basicType(basicType);
    int basicType_is_present() const;
    void omit_basicType();
private:
    OSS_UINT32 bit_mask;
    timeStamp timeStamp_field;
    id id_field;
    rsaMsg rsaMsg_field;
    responseType responseType_field;
    details details_field;
    mass mass_field;
    basicType basicType_field;
};

class OSS_PUBLIC IntersectionCollision   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 msgCnt;
    typedef OSS_UINT32 timeStamp;
    typedef BSMcoreData partOne;
    typedef __shared1 intersectionID;

    IntersectionCollision();
    IntersectionCollision(const IntersectionCollision &);
    IntersectionCollision(msgCnt, timeStamp, const partOne &, const intersectionID &);
    IntersectionCollision(msgCnt, const intersectionID &);

    IntersectionCollision & operator = (const IntersectionCollision &);
    int operator == (const IntersectionCollision &) const;
    int operator != (const IntersectionCollision &) const;

    msgCnt & get_msgCnt();
    msgCnt get_msgCnt() const;
    void set_msgCnt(msgCnt);

    timeStamp *get_timeStamp();
    const timeStamp *get_timeStamp() const;
    void set_timeStamp(timeStamp);
    int timeStamp_is_present() const;
    void omit_timeStamp();

    partOne *get_partOne();
    const partOne *get_partOne() const;
    void set_partOne(const partOne &);
    int partOne_is_present() const;
    void omit_partOne();

    intersectionID & get_intersectionID();
    const intersectionID & get_intersectionID() const;
    void set_intersectionID(const intersectionID &);
private:
    OSS_UINT32 bit_mask;
    msgCnt msgCnt_field;
    timeStamp timeStamp_field;
    partOne partOne_field;
    intersectionID intersectionID_field;
};

class OSS_PUBLIC __seqof1 : public OssList  /* SEQUENCE OF */
{
public:
    typedef Position3D component;

    __seqof1();
    __seqof1(const __seqof1 &);
    ~__seqof1();

    __seqof1 & operator = (const __seqof1 &);
    int operator == (const __seqof1 &) const;
    int operator != (const __seqof1 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__seqof1 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __seqof1 *);

    int remove_front();
    int remove_after(OssIndex);

    __seqof1 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC __shared14 : public OssList  /* SEQUENCE OF */
{
public:
    typedef DTime component;

    __shared14();
    __shared14(const __shared14 &);
    ~__shared14();

    __shared14 & operator = (const __shared14 &);
    int operator == (const __shared14 &) const;
    int operator != (const __shared14 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared14 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared14 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared14 *extract_after(OssIndex, OssIndex);
};

class OSS_PUBLIC ParkingArea   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef enum ParkingAreaType type;
    typedef __seqof1 accessPoints;
    typedef enum ParkingAcessPointTypes accessPointType;
    typedef OSS_UINT32 freePlacesCount;
    typedef __shared14 opens;
    typedef __shared14 closes;
    typedef OSS_UINT32 costToPark;

    ParkingArea();
    ParkingArea(const ParkingArea &);
    ParkingArea(id, type, const accessPoints &, accessPointType, freePlacesCount, 
	const opens &, const closes &, costToPark);

    ParkingArea & operator = (const ParkingArea &);
    int operator == (const ParkingArea &) const;
    int operator != (const ParkingArea &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    type & get_type();
    type get_type() const;
    void set_type(type);

    accessPoints & get_accessPoints();
    const accessPoints & get_accessPoints() const;
    void set_accessPoints(const accessPoints &);

    accessPointType & get_accessPointType();
    accessPointType get_accessPointType() const;
    void set_accessPointType(accessPointType);

    freePlacesCount & get_freePlacesCount();
    freePlacesCount get_freePlacesCount() const;
    void set_freePlacesCount(freePlacesCount);

    opens & get_opens();
    const opens & get_opens() const;
    void set_opens(const opens &);

    closes & get_closes();
    const closes & get_closes() const;
    void set_closes(const closes &);

    costToPark & get_costToPark();
    costToPark get_costToPark() const;
    void set_costToPark(costToPark);
private:
    id id_field;
    type type_field;
    accessPoints accessPoints_field;
    accessPointType accessPointType_field;
    freePlacesCount freePlacesCount_field;
    opens opens_field;
    closes closes_field;
    costToPark costToPark_field;
};

class OSS_PUBLIC RoadSegment;

class OSS_PUBLIC __shared15 : public OssList  /* SEQUENCE OF */
{
public:
    typedef RoadSegment component;

    __shared15();
    __shared15(const __shared15 &);
    ~__shared15();

    __shared15 & operator = (const __shared15 &);
    int operator == (const __shared15 &) const;
    int operator != (const __shared15 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared15 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared15 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared15 *extract_after(OssIndex, OssIndex);
};

typedef __shared15 RoadSegmentList;

class OSS_PUBLIC RestrictionClassAssignment;

class OSS_PUBLIC __shared17 : public OssList  /* SEQUENCE OF */
{
public:
    typedef RestrictionClassAssignment component;

    __shared17();
    __shared17(const __shared17 &);
    ~__shared17();

    __shared17 & operator = (const __shared17 &);
    int operator == (const __shared17 &) const;
    int operator != (const __shared17 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared17 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared17 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared17 *extract_after(OssIndex, OssIndex);
};

typedef __shared17 RestrictionClassList;

class OSS_PUBLIC MapData   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 timeStamp;
    typedef OSS_UINT32 msgIssueRevision;
    typedef enum LayerType layerType;
    typedef OSS_UINT32 layerID;
    typedef ParkingArea parkingAreas;
    typedef IntersectionGeometryList intersections;
    typedef __shared15 roadSegments;
    typedef DataParameters dataParameters;
    typedef __shared17 restrictionList;

    MapData();
    MapData(const MapData &);
    MapData(timeStamp, msgIssueRevision, layerType, layerID, const parkingAreas &, 
	const intersections &, const roadSegments &, const dataParameters &, const restrictionList &);
    MapData(msgIssueRevision);

    MapData & operator = (const MapData &);
    int operator == (const MapData &) const;
    int operator != (const MapData &) const;

    timeStamp *get_timeStamp();
    const timeStamp *get_timeStamp() const;
    void set_timeStamp(timeStamp);
    int timeStamp_is_present() const;
    void omit_timeStamp();

    msgIssueRevision & get_msgIssueRevision();
    msgIssueRevision get_msgIssueRevision() const;
    void set_msgIssueRevision(msgIssueRevision);

    layerType *get_layerType();
    const layerType *get_layerType() const;
    void set_layerType(layerType);
    int layerType_is_present() const;
    void omit_layerType();

    layerID *get_layerID();
    const layerID *get_layerID() const;
    void set_layerID(layerID);
    int layerID_is_present() const;
    void omit_layerID();

    parkingAreas *get_parkingAreas();
    const parkingAreas *get_parkingAreas() const;
    void set_parkingAreas(const parkingAreas &);
    int parkingAreas_is_present() const;
    void omit_parkingAreas();

    intersections *get_intersections();
    const intersections *get_intersections() const;
    void set_intersections(const intersections &);
    int intersections_is_present() const;
    void omit_intersections();

    roadSegments *get_roadSegments();
    const roadSegments *get_roadSegments() const;
    void set_roadSegments(const roadSegments &);
    int roadSegments_is_present() const;
    void omit_roadSegments();

    dataParameters *get_dataParameters();
    const dataParameters *get_dataParameters() const;
    void set_dataParameters(const dataParameters &);
    int dataParameters_is_present() const;
    void omit_dataParameters();

    restrictionList *get_restrictionList();
    const restrictionList *get_restrictionList() const;
    void set_restrictionList(const restrictionList &);
    int restrictionList_is_present() const;
    void omit_restrictionList();
private:
    OSS_UINT32 bit_mask;
    timeStamp timeStamp_field;
    msgIssueRevision msgIssueRevision_field;
    layerType layerType_field;
    layerID layerID_field;
    parkingAreas parkingAreas_field;
    intersections intersections_field;
    roadSegments roadSegments_field;
    dataParameters dataParameters_field;
    restrictionList restrictionList_field;
};

class OSS_PUBLIC SPAT   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 timeStamp;
    typedef OssString name;
    typedef IntersectionStateList intersections;

    SPAT();
    SPAT(const SPAT &);
    SPAT(timeStamp, const name &, const intersections &);
    SPAT(const intersections &);

    SPAT & operator = (const SPAT &);
    int operator == (const SPAT &) const;
    int operator != (const SPAT &) const;

    timeStamp *get_timeStamp();
    const timeStamp *get_timeStamp() const;
    void set_timeStamp(timeStamp);
    int timeStamp_is_present() const;
    void omit_timeStamp();

    name *get_name();
    const name *get_name() const;
    void set_name(const name &);
    int name_is_present() const;
    void omit_name();

    intersections & get_intersections();
    const intersections & get_intersections() const;
    void set_intersections(const intersections &);
private:
    OSS_UINT32 bit_mask;
    timeStamp timeStamp_field;
    name name_field;
    intersections intersections_field;
};

class OSS_PUBLIC VehicleID  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	entityID_chosen = 1,
	stationID_chosen = 2
    };
    typedef OssString entityID;
    typedef OSS_UINT32 stationID;

    VehicleID();
    VehicleID(const VehicleID &);
    ~VehicleID();

    VehicleID & operator = (const VehicleID &);
    int operator == (const VehicleID &) const;
    int operator != (const VehicleID &) const;

    entityID *get_entityID();
    const entityID *get_entityID() const;
    void set_entityID(const entityID &);

    stationID *get_stationID();
    const stationID *get_stationID() const;
    void set_stationID(stationID);
private:
    union {
	OSSC::COssString entityID_field;
	stationID stationID_field;
    };
    void cleanup();
};

class OSS_PUBLIC RequestorType   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef enum BasicVehicleRole role;
    typedef enum RequestSubRole subrole;
    typedef enum RequestImportanceLevel request;
    typedef OSS_UINT32 iso3883;
    typedef enum VehicleType hpmsType;

    RequestorType();
    RequestorType(const RequestorType &);
    RequestorType(role, subrole, request, iso3883, hpmsType);
    RequestorType(role);

    RequestorType & operator = (const RequestorType &);
    int operator == (const RequestorType &) const;
    int operator != (const RequestorType &) const;

    role & get_role();
    role get_role() const;
    void set_role(role);

    subrole *get_subrole();
    const subrole *get_subrole() const;
    void set_subrole(subrole);
    int subrole_is_present() const;
    void omit_subrole();

    request *get_request();
    const request *get_request() const;
    void set_request(request);
    int request_is_present() const;
    void omit_request();

    iso3883 *get_iso3883();
    const iso3883 *get_iso3883() const;
    void set_iso3883(iso3883);
    int iso3883_is_present() const;
    void omit_iso3883();

    hpmsType *get_hpmsType();
    const hpmsType *get_hpmsType() const;
    void set_hpmsType(hpmsType);
    int hpmsType_is_present() const;
    void omit_hpmsType();
private:
    OSS_UINT32 bit_mask;
    role role_field;
    subrole subrole_field;
    request request_field;
    iso3883 iso3883_field;
    hpmsType hpmsType_field;
};

class OSS_PUBLIC RequestorPositionVector   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef Position3D position;
    typedef OSS_UINT32 heading;
    typedef TransmissionAndSpeed speed;

    RequestorPositionVector();
    RequestorPositionVector(const RequestorPositionVector &);
    RequestorPositionVector(const position &, heading, const speed &);
    RequestorPositionVector(const position &);

    RequestorPositionVector & operator = (const RequestorPositionVector &);
    int operator == (const RequestorPositionVector &) const;
    int operator != (const RequestorPositionVector &) const;

    position & get_position();
    const position & get_position() const;
    void set_position(const position &);

    heading *get_heading();
    const heading *get_heading() const;
    void set_heading(heading);
    int heading_is_present() const;
    void omit_heading();

    speed *get_speed();
    const speed *get_speed() const;
    void set_speed(const speed &);
    int speed_is_present() const;
    void omit_speed();
private:
    OSS_UINT32 bit_mask;
    position position_field;
    heading heading_field;
    speed speed_field;
};

class OSS_PUBLIC RequestorDescription   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef VehicleID id;
    typedef RequestorType type;
    typedef RequestorPositionVector position;
    typedef OssString name;
    typedef OssString routeName;
    typedef OssBitString transitStatus;
    typedef enum TransitVehicleOccupancy transitOccupancy;
    typedef OSS_INT32 transitSchedule;

    RequestorDescription();
    RequestorDescription(const RequestorDescription &);
    RequestorDescription(const id &, const type &, const position &, const name &, 
	const routeName &, const transitStatus &, transitOccupancy, transitSchedule);
    RequestorDescription(const id &);

    RequestorDescription & operator = (const RequestorDescription &);
    int operator == (const RequestorDescription &) const;
    int operator != (const RequestorDescription &) const;

    id & get_id();
    const id & get_id() const;
    void set_id(const id &);

    type *get_type();
    const type *get_type() const;
    void set_type(const type &);
    int type_is_present() const;
    void omit_type();

    position *get_position();
    const position *get_position() const;
    void set_position(const position &);
    int position_is_present() const;
    void omit_position();

    name *get_name();
    const name *get_name() const;
    void set_name(const name &);
    int name_is_present() const;
    void omit_name();

    routeName *get_routeName();
    const routeName *get_routeName() const;
    void set_routeName(const routeName &);
    int routeName_is_present() const;
    void omit_routeName();

    transitStatus *get_transitStatus();
    const transitStatus *get_transitStatus() const;
    void set_transitStatus(const transitStatus &);
    int transitStatus_is_present() const;
    void omit_transitStatus();

    transitOccupancy *get_transitOccupancy();
    const transitOccupancy *get_transitOccupancy() const;
    void set_transitOccupancy(transitOccupancy);
    int transitOccupancy_is_present() const;
    void omit_transitOccupancy();

    transitSchedule *get_transitSchedule();
    const transitSchedule *get_transitSchedule() const;
    void set_transitSchedule(transitSchedule);
    int transitSchedule_is_present() const;
    void omit_transitSchedule();
private:
    OSS_UINT32 bit_mask;
    id id_field;
    type type_field;
    position position_field;
    name name_field;
    routeName routeName_field;
    transitStatus transitStatus_field;
    transitOccupancy transitOccupancy_field;
    transitSchedule transitSchedule_field;
};

class OSS_PUBLIC SignalRequestPackage;

class OSS_PUBLIC __shared18 : public OssList  /* SEQUENCE OF */
{
public:
    typedef SignalRequestPackage component;

    __shared18();
    __shared18(const __shared18 &);
    ~__shared18();

    __shared18 & operator = (const __shared18 &);
    int operator == (const __shared18 &) const;
    int operator != (const __shared18 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared18 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared18 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared18 *extract_after(OssIndex, OssIndex);
};

typedef __shared18 SignalRequestList;

class OSS_PUBLIC SignalRequestMessage   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 timeStamp;
    typedef OSS_UINT32 second;
    typedef OSS_UINT32 sequenceNumber;
    typedef __shared18 requests;
    typedef RequestorDescription requestor;

    SignalRequestMessage();
    SignalRequestMessage(const SignalRequestMessage &);
    SignalRequestMessage(timeStamp, second, sequenceNumber, const requests &, const requestor &);
    SignalRequestMessage(second, const requestor &);

    SignalRequestMessage & operator = (const SignalRequestMessage &);
    int operator == (const SignalRequestMessage &) const;
    int operator != (const SignalRequestMessage &) const;

    timeStamp *get_timeStamp();
    const timeStamp *get_timeStamp() const;
    void set_timeStamp(timeStamp);
    int timeStamp_is_present() const;
    void omit_timeStamp();

    second & get_second();
    second get_second() const;
    void set_second(second);

    sequenceNumber *get_sequenceNumber();
    const sequenceNumber *get_sequenceNumber() const;
    void set_sequenceNumber(sequenceNumber);
    int sequenceNumber_is_present() const;
    void omit_sequenceNumber();

    requests *get_requests();
    const requests *get_requests() const;
    void set_requests(const requests &);
    int requests_is_present() const;
    void omit_requests();

    requestor & get_requestor();
    const requestor & get_requestor() const;
    void set_requestor(const requestor &);
private:
    OSS_UINT32 bit_mask;
    timeStamp timeStamp_field;
    second second_field;
    sequenceNumber sequenceNumber_field;
    requests requests_field;
    requestor requestor_field;
};

class OSS_PUBLIC SignalStatus;

class OSS_PUBLIC __shared20 : public OssList  /* SEQUENCE OF */
{
public:
    typedef SignalStatus component;

    __shared20();
    __shared20(const __shared20 &);
    ~__shared20();

    __shared20 & operator = (const __shared20 &);
    int operator == (const __shared20 &) const;
    int operator != (const __shared20 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared20 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared20 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared20 *extract_after(OssIndex, OssIndex);
};

typedef __shared20 SignalStatusList;

class OSS_PUBLIC SignalStatusMessage   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 timeStamp;
    typedef OSS_UINT32 second;
    typedef OSS_UINT32 sequenceNumber;
    typedef __shared20 status;

    SignalStatusMessage();
    SignalStatusMessage(const SignalStatusMessage &);
    SignalStatusMessage(timeStamp, second, sequenceNumber, const status &);
    SignalStatusMessage(second, const status &);

    SignalStatusMessage & operator = (const SignalStatusMessage &);
    int operator == (const SignalStatusMessage &) const;
    int operator != (const SignalStatusMessage &) const;

    timeStamp *get_timeStamp();
    const timeStamp *get_timeStamp() const;
    void set_timeStamp(timeStamp);
    int timeStamp_is_present() const;
    void omit_timeStamp();

    second & get_second();
    second get_second() const;
    void set_second(second);

    sequenceNumber *get_sequenceNumber();
    const sequenceNumber *get_sequenceNumber() const;
    void set_sequenceNumber(sequenceNumber);
    int sequenceNumber_is_present() const;
    void omit_sequenceNumber();

    status & get_status();
    const status & get_status() const;
    void set_status(const status &);
private:
    OSS_UINT32 bit_mask;
    timeStamp timeStamp_field;
    second second_field;
    sequenceNumber sequenceNumber_field;
    status status_field;
};

class OSS_PUBLIC __shared3   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_INT32 x;
    typedef OSS_INT32 y;

    __shared3();
    __shared3(const __shared3 &);
    __shared3(x, y);

    __shared3 & operator = (const __shared3 &);
    int operator == (const __shared3 &) const;
    int operator != (const __shared3 &) const;

    x & get_x();
    x get_x() const;
    void set_x(x);

    y & get_y();
    y get_y() const;
    void set_y(y);
private:
    x x_field;
    y y_field;
};

typedef __shared3 Node_XY_20b;

typedef __shared3 Node_XY_22b;

typedef __shared3 Node_XY_24b;

typedef __shared3 Node_XY_26b;

typedef __shared3 Node_XY_28b;

typedef __shared3 Node_XY_32b;

class OSS_PUBLIC Node_LLmD_64b   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_INT32 lon;
    typedef OSS_INT32 lat;

    Node_LLmD_64b();
    Node_LLmD_64b(const Node_LLmD_64b &);
    Node_LLmD_64b(lon, lat);

    Node_LLmD_64b & operator = (const Node_LLmD_64b &);
    int operator == (const Node_LLmD_64b &) const;
    int operator != (const Node_LLmD_64b &) const;

    lon & get_lon();
    lon get_lon() const;
    void set_lon(lon);

    lat & get_lat();
    lat get_lat() const;
    void set_lat(lat);
private:
    lon lon_field;
    lat lat_field;
};

class OSS_PUBLIC NodeOffsetPointXY  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	node_XY1_chosen = 1,
	node_XY2_chosen = 2,
	node_XY3_chosen = 3,
	node_XY4_chosen = 4,
	node_XY5_chosen = 5,
	node_XY6_chosen = 6,
	node_LatLon_chosen = 7
    };
    typedef __shared3 node_XY1;
    typedef __shared3 node_XY2;
    typedef __shared3 node_XY3;
    typedef __shared3 node_XY4;
    typedef __shared3 node_XY5;
    typedef __shared3 node_XY6;
    typedef Node_LLmD_64b node_LatLon;

    NodeOffsetPointXY();
    NodeOffsetPointXY(const NodeOffsetPointXY &);
    ~NodeOffsetPointXY();

    NodeOffsetPointXY & operator = (const NodeOffsetPointXY &);
    int operator == (const NodeOffsetPointXY &) const;
    int operator != (const NodeOffsetPointXY &) const;

    node_XY1 *get_node_XY1();
    const node_XY1 *get_node_XY1() const;
    void set_node_XY1(const node_XY1 &);

    node_XY2 *get_node_XY2();
    const node_XY2 *get_node_XY2() const;
    void set_node_XY2(const node_XY2 &);

    node_XY3 *get_node_XY3();
    const node_XY3 *get_node_XY3() const;
    void set_node_XY3(const node_XY3 &);

    node_XY4 *get_node_XY4();
    const node_XY4 *get_node_XY4() const;
    void set_node_XY4(const node_XY4 &);

    node_XY5 *get_node_XY5();
    const node_XY5 *get_node_XY5() const;
    void set_node_XY5(const node_XY5 &);

    node_XY6 *get_node_XY6();
    const node_XY6 *get_node_XY6() const;
    void set_node_XY6(const node_XY6 &);

    node_LatLon *get_node_LatLon();
    const node_LatLon *get_node_LatLon() const;
    void set_node_LatLon(const node_LatLon &);
private:
    union {
	node_XY1 *node_XY1_field;
	node_XY2 *node_XY2_field;
	node_XY3 *node_XY3_field;
	node_XY4 *node_XY4_field;
	node_XY5 *node_XY5_field;
	node_XY6 *node_XY6_field;
	node_LatLon *node_LatLon_field;
    };
    void cleanup();
};

class OSS_PUBLIC __shared4 : public OssList  /* SEQUENCE OF */
{
public:
    typedef enum NodeAttributeXY component;

    __shared4();
    __shared4(const __shared4 &);
    ~__shared4();

    __shared4 & operator = (const __shared4 &);
    int operator == (const __shared4 &) const;
    int operator != (const __shared4 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(component );
    OssIndex prepend(__shared4 *);
    OssIndex insert_after(OssIndex, component );
    OssIndex insert_after(OssIndex, __shared4 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared4 *extract_after(OssIndex, OssIndex);
};

typedef __shared4 NodeAttributeXYList;

class OSS_PUBLIC __shared5 : public OssList  /* SEQUENCE OF */
{
public:
    typedef enum SegmentAttributeXY component;

    __shared5();
    __shared5(const __shared5 &);
    ~__shared5();

    __shared5 & operator = (const __shared5 &);
    int operator == (const __shared5 &) const;
    int operator != (const __shared5 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(component );
    OssIndex prepend(__shared5 *);
    OssIndex insert_after(OssIndex, component );
    OssIndex insert_after(OssIndex, __shared5 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared5 *extract_after(OssIndex, OssIndex);
};

typedef __shared5 SegmentAttributeXYList;

class OSS_PUBLIC NodeAttributeSetXY   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared4 localNode;
    typedef __shared5 disabled;
    typedef __shared5 enabled;
    typedef LaneDataAttributeList data;
    typedef OSS_INT32 dWidth;
    typedef OSS_INT32 dElevation;

    NodeAttributeSetXY();
    NodeAttributeSetXY(const NodeAttributeSetXY &);
    NodeAttributeSetXY(const localNode &, const disabled &, const enabled &, const data &, 
	dWidth, dElevation);

    NodeAttributeSetXY & operator = (const NodeAttributeSetXY &);
    int operator == (const NodeAttributeSetXY &) const;
    int operator != (const NodeAttributeSetXY &) const;

    localNode *get_localNode();
    const localNode *get_localNode() const;
    void set_localNode(const localNode &);
    int localNode_is_present() const;
    void omit_localNode();

    disabled *get_disabled();
    const disabled *get_disabled() const;
    void set_disabled(const disabled &);
    int disabled_is_present() const;
    void omit_disabled();

    enabled *get_enabled();
    const enabled *get_enabled() const;
    void set_enabled(const enabled &);
    int enabled_is_present() const;
    void omit_enabled();

    data *get_data();
    const data *get_data() const;
    void set_data(const data &);
    int data_is_present() const;
    void omit_data();

    dWidth *get_dWidth();
    const dWidth *get_dWidth() const;
    void set_dWidth(dWidth);
    int dWidth_is_present() const;
    void omit_dWidth();

    dElevation *get_dElevation();
    const dElevation *get_dElevation() const;
    void set_dElevation(dElevation);
    int dElevation_is_present() const;
    void omit_dElevation();
private:
    OSS_UINT32 bit_mask;
    localNode localNode_field;
    disabled disabled_field;
    enabled enabled_field;
    data data_field;
    dWidth dWidth_field;
    dElevation dElevation_field;
};

class OSS_PUBLIC NodeXY   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef NodeOffsetPointXY delta;
    typedef NodeAttributeSetXY attributes;

    NodeXY();
    NodeXY(const NodeXY &);
    NodeXY(const delta &, const attributes &);
    NodeXY(const delta &);

    NodeXY & operator = (const NodeXY &);
    int operator == (const NodeXY &) const;
    int operator != (const NodeXY &) const;

    delta & get_delta();
    const delta & get_delta() const;
    void set_delta(const delta &);

    attributes *get_attributes();
    const attributes *get_attributes() const;
    void set_attributes(const attributes &);
    int attributes_is_present() const;
    void omit_attributes();
private:
    OSS_UINT32 bit_mask;
    delta delta_field;
    attributes attributes_field;
};

class OSS_PUBLIC PathHistoryPoint;

class OSS_PUBLIC __shared21 : public OssList  /* SEQUENCE OF */
{
public:
    typedef PathHistoryPoint component;

    __shared21();
    __shared21(const __shared21 &);
    ~__shared21();

    __shared21 & operator = (const __shared21 &);
    int operator == (const __shared21 &) const;
    int operator != (const __shared21 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared21 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared21 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared21 *extract_after(OssIndex, OssIndex);
};

typedef __shared21 PathHistoryPointList;

class OSS_PUBLIC PathHistory   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef FullPositionVector initialPosition;
    typedef OssBitString currGNSSstatus;
    typedef __shared21 crumbData;

    PathHistory();
    PathHistory(const PathHistory &);
    PathHistory(const initialPosition &, const currGNSSstatus &, const crumbData &);
    PathHistory(const crumbData &);

    PathHistory & operator = (const PathHistory &);
    int operator == (const PathHistory &) const;
    int operator != (const PathHistory &) const;

    initialPosition *get_initialPosition();
    const initialPosition *get_initialPosition() const;
    void set_initialPosition(const initialPosition &);
    int initialPosition_is_present() const;
    void omit_initialPosition();

    currGNSSstatus *get_currGNSSstatus();
    const currGNSSstatus *get_currGNSSstatus() const;
    void set_currGNSSstatus(const currGNSSstatus &);
    int currGNSSstatus_is_present() const;
    void omit_currGNSSstatus();

    crumbData & get_crumbData();
    const crumbData & get_crumbData() const;
    void set_crumbData(const crumbData &);
private:
    OSS_UINT32 bit_mask;
    initialPosition initialPosition_field;
    currGNSSstatus currGNSSstatus_field;
    crumbData crumbData_field;
};

class OSS_PUBLIC PathHistoryPoint   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_INT32 latOffset;
    typedef OSS_INT32 lonOffset;
    typedef OSS_INT32 elevationOffset;
    typedef OSS_UINT32 timeOffset;
    typedef OSS_UINT32 speed;
    typedef PositionAccuracy posAccuracy;
    typedef OSS_UINT32 heading;

    PathHistoryPoint();
    PathHistoryPoint(const PathHistoryPoint &);
    PathHistoryPoint(latOffset, lonOffset, elevationOffset, timeOffset, speed, const posAccuracy &, 
	heading);
    PathHistoryPoint(latOffset, lonOffset, elevationOffset, timeOffset);

    PathHistoryPoint & operator = (const PathHistoryPoint &);
    int operator == (const PathHistoryPoint &) const;
    int operator != (const PathHistoryPoint &) const;

    latOffset & get_latOffset();
    latOffset get_latOffset() const;
    void set_latOffset(latOffset);

    lonOffset & get_lonOffset();
    lonOffset get_lonOffset() const;
    void set_lonOffset(lonOffset);

    elevationOffset & get_elevationOffset();
    elevationOffset get_elevationOffset() const;
    void set_elevationOffset(elevationOffset);

    timeOffset & get_timeOffset();
    timeOffset get_timeOffset() const;
    void set_timeOffset(timeOffset);

    speed *get_speed();
    const speed *get_speed() const;
    void set_speed(speed);
    int speed_is_present() const;
    void omit_speed();

    posAccuracy *get_posAccuracy();
    const posAccuracy *get_posAccuracy() const;
    void set_posAccuracy(const posAccuracy &);
    int posAccuracy_is_present() const;
    void omit_posAccuracy();

    heading *get_heading();
    const heading *get_heading() const;
    void set_heading(heading);
    int heading_is_present() const;
    void omit_heading();
private:
    OSS_UINT32 bit_mask;
    latOffset latOffset_field;
    lonOffset lonOffset_field;
    elevationOffset elevationOffset_field;
    timeOffset timeOffset_field;
    speed speed_field;
    posAccuracy posAccuracy_field;
    heading heading_field;
};

class OSS_PUBLIC PathPrediction   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_INT32 radiusOfCurve;
    typedef OSS_UINT32 confidence;

    PathPrediction();
    PathPrediction(const PathPrediction &);
    PathPrediction(radiusOfCurve, confidence);

    PathPrediction & operator = (const PathPrediction &);
    int operator == (const PathPrediction &) const;
    int operator != (const PathPrediction &) const;

    radiusOfCurve & get_radiusOfCurve();
    radiusOfCurve get_radiusOfCurve() const;
    void set_radiusOfCurve(radiusOfCurve);

    confidence & get_confidence();
    confidence get_confidence() const;
    void set_confidence(confidence);
private:
    radiusOfCurve radiusOfCurve_field;
    confidence confidence_field;
};

class OSS_PUBLIC RestrictionUserType;

class OSS_PUBLIC __shared16 : public OssList  /* SEQUENCE OF */
{
public:
    typedef RestrictionUserType component;

    __shared16();
    __shared16(const __shared16 &);
    ~__shared16();

    __shared16 & operator = (const __shared16 &);
    int operator == (const __shared16 &) const;
    int operator != (const __shared16 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared16 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared16 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared16 *extract_after(OssIndex, OssIndex);
};

typedef __shared16 RestrictionUserTypeList;

class OSS_PUBLIC RestrictionClassAssignment   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 id;
    typedef __shared16 users;

    RestrictionClassAssignment();
    RestrictionClassAssignment(const RestrictionClassAssignment &);
    RestrictionClassAssignment(id, const users &);

    RestrictionClassAssignment & operator = (const RestrictionClassAssignment &);
    int operator == (const RestrictionClassAssignment &) const;
    int operator != (const RestrictionClassAssignment &) const;

    id & get_id();
    id get_id() const;
    void set_id(id);

    users & get_users();
    const users & get_users() const;
    void set_users(const users &);
private:
    id id_field;
    users users_field;
};

class OSS_PUBLIC RestrictionUserType  : public OssChoice   /* CHOICE */
{
public:
    enum Id {
	unselected,
	basicType_chosen = 1
    };
    typedef enum RestrictionAppliesTo basicType;

    RestrictionUserType();
    RestrictionUserType(const RestrictionUserType &);

    RestrictionUserType & operator = (const RestrictionUserType &);
    int operator == (const RestrictionUserType &) const;
    int operator != (const RestrictionUserType &) const;

    basicType *get_basicType();
    const basicType *get_basicType() const;
    void set_basicType(basicType);
private:
    union {
	basicType basicType_field;
    };
};

typedef __shared1 RoadSegmentReferenceID;

typedef __shared9 RoadLaneSetList;

class OSS_PUBLIC RoadSegment   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OssString name;
    typedef __shared1 id;
    typedef OSS_UINT32 revision;
    typedef Position3D refPoint;
    typedef OSS_UINT32 laneWidth;
    typedef __shared2 speedLimits;
    typedef __shared9 roadLaneSet;

    RoadSegment();
    RoadSegment(const RoadSegment &);
    RoadSegment(const name &, const id &, revision, const refPoint &, laneWidth, 
	const speedLimits &, const roadLaneSet &);
    RoadSegment(const id &, revision, const refPoint &, const roadLaneSet &);

    RoadSegment & operator = (const RoadSegment &);
    int operator == (const RoadSegment &) const;
    int operator != (const RoadSegment &) const;

    name *get_name();
    const name *get_name() const;
    void set_name(const name &);
    int name_is_present() const;
    void omit_name();

    id & get_id();
    const id & get_id() const;
    void set_id(const id &);

    revision & get_revision();
    revision get_revision() const;
    void set_revision(revision);

    refPoint & get_refPoint();
    const refPoint & get_refPoint() const;
    void set_refPoint(const refPoint &);

    laneWidth *get_laneWidth();
    const laneWidth *get_laneWidth() const;
    void set_laneWidth(laneWidth);
    int laneWidth_is_present() const;
    void omit_laneWidth();

    speedLimits *get_speedLimits();
    const speedLimits *get_speedLimits() const;
    void set_speedLimits(const speedLimits &);
    int speedLimits_is_present() const;
    void omit_speedLimits();

    roadLaneSet & get_roadLaneSet();
    const roadLaneSet & get_roadLaneSet() const;
    void set_roadLaneSet(const roadLaneSet &);
private:
    OSS_UINT32 bit_mask;
    name name_field;
    id id_field;
    revision revision_field;
    refPoint refPoint_field;
    laneWidth laneWidth_field;
    speedLimits speedLimits_field;
    roadLaneSet roadLaneSet_field;
};

class OSS_PUBLIC SignalRequesterInfo   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef VehicleID id;
    typedef OSS_UINT32 request;
    typedef OSS_UINT32 sequenceNumber;
    typedef enum BasicVehicleRole role;
    typedef RequestorType typeData;

    SignalRequesterInfo();
    SignalRequesterInfo(const SignalRequesterInfo &);
    SignalRequesterInfo(const id &, request, sequenceNumber, role, const typeData &);
    SignalRequesterInfo(const id &, request, sequenceNumber);

    SignalRequesterInfo & operator = (const SignalRequesterInfo &);
    int operator == (const SignalRequesterInfo &) const;
    int operator != (const SignalRequesterInfo &) const;

    id & get_id();
    const id & get_id() const;
    void set_id(const id &);

    request & get_request();
    request get_request() const;
    void set_request(request);

    sequenceNumber & get_sequenceNumber();
    sequenceNumber get_sequenceNumber() const;
    void set_sequenceNumber(sequenceNumber);

    role *get_role();
    const role *get_role() const;
    void set_role(role);
    int role_is_present() const;
    void omit_role();

    typeData *get_typeData();
    const typeData *get_typeData() const;
    void set_typeData(const typeData &);
    int typeData_is_present() const;
    void omit_typeData();
private:
    OSS_UINT32 bit_mask;
    id id_field;
    request request_field;
    sequenceNumber sequenceNumber_field;
    role role_field;
    typeData typeData_field;
};

class OSS_PUBLIC SignalRequest   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef __shared1 id;
    typedef OSS_UINT32 requestID;
    typedef enum PriorityRequestType requestType;
    typedef IntersectionAccessPoint inBoundLane;
    typedef IntersectionAccessPoint outBoundLane;

    SignalRequest();
    SignalRequest(const SignalRequest &);
    SignalRequest(const id &, requestID, requestType, const inBoundLane &, const outBoundLane &);
    SignalRequest(const id &, requestID, requestType, const inBoundLane &);

    SignalRequest & operator = (const SignalRequest &);
    int operator == (const SignalRequest &) const;
    int operator != (const SignalRequest &) const;

    id & get_id();
    const id & get_id() const;
    void set_id(const id &);

    requestID & get_requestID();
    requestID get_requestID() const;
    void set_requestID(requestID);

    requestType & get_requestType();
    requestType get_requestType() const;
    void set_requestType(requestType);

    inBoundLane & get_inBoundLane();
    const inBoundLane & get_inBoundLane() const;
    void set_inBoundLane(const inBoundLane &);

    outBoundLane *get_outBoundLane();
    const outBoundLane *get_outBoundLane() const;
    void set_outBoundLane(const outBoundLane &);
    int outBoundLane_is_present() const;
    void omit_outBoundLane();
private:
    OSS_UINT32 bit_mask;
    id id_field;
    requestID requestID_field;
    requestType requestType_field;
    inBoundLane inBoundLane_field;
    outBoundLane outBoundLane_field;
};

class OSS_PUBLIC SignalRequestPackage   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef SignalRequest request;
    typedef OSS_UINT32 minute;
    typedef OSS_UINT32 second;
    typedef OSS_UINT32 duration;

    SignalRequestPackage();
    SignalRequestPackage(const SignalRequestPackage &);
    SignalRequestPackage(const request &, minute, second, duration);
    SignalRequestPackage(const request &);

    SignalRequestPackage & operator = (const SignalRequestPackage &);
    int operator == (const SignalRequestPackage &) const;
    int operator != (const SignalRequestPackage &) const;

    request & get_request();
    const request & get_request() const;
    void set_request(const request &);

    minute *get_minute();
    const minute *get_minute() const;
    void set_minute(minute);
    int minute_is_present() const;
    void omit_minute();

    second *get_second();
    const second *get_second() const;
    void set_second(second);
    int second_is_present() const;
    void omit_second();

    duration *get_duration();
    const duration *get_duration() const;
    void set_duration(duration);
    int duration_is_present() const;
    void omit_duration();
private:
    OSS_UINT32 bit_mask;
    request request_field;
    minute minute_field;
    second second_field;
    duration duration_field;
};

class OSS_PUBLIC SignalStatusPackage;

class OSS_PUBLIC __shared19 : public OssList  /* SEQUENCE OF */
{
public:
    typedef SignalStatusPackage component;

    __shared19();
    __shared19(const __shared19 &);
    ~__shared19();

    __shared19 & operator = (const __shared19 &);
    int operator == (const __shared19 &) const;
    int operator != (const __shared19 &) const;

    component *at(OssIndex);
    const component *at(OssIndex) const;

    OssIndex prepend(const component & );
    OssIndex prepend(__shared19 *);
    OssIndex insert_after(OssIndex, const component & );
    OssIndex insert_after(OssIndex, __shared19 *);

    int remove_front();
    int remove_after(OssIndex);

    __shared19 *extract_after(OssIndex, OssIndex);
};

typedef __shared19 SignalStatusPackageList;

class OSS_PUBLIC SignalStatus   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef OSS_UINT32 sequenceNumber;
    typedef __shared1 id;
    typedef __shared19 sigStatus;

    SignalStatus();
    SignalStatus(const SignalStatus &);
    SignalStatus(sequenceNumber, const id &, const sigStatus &);

    SignalStatus & operator = (const SignalStatus &);
    int operator == (const SignalStatus &) const;
    int operator != (const SignalStatus &) const;

    sequenceNumber & get_sequenceNumber();
    sequenceNumber get_sequenceNumber() const;
    void set_sequenceNumber(sequenceNumber);

    id & get_id();
    const id & get_id() const;
    void set_id(const id &);

    sigStatus & get_sigStatus();
    const sigStatus & get_sigStatus() const;
    void set_sigStatus(const sigStatus &);
private:
    sequenceNumber sequenceNumber_field;
    id id_field;
    sigStatus sigStatus_field;
};

class OSS_PUBLIC SignalStatusPackage   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef SignalRequesterInfo requester;
    typedef IntersectionAccessPoint inboundOn;
    typedef IntersectionAccessPoint outboundOn;
    typedef OSS_UINT32 minute;
    typedef OSS_UINT32 second;
    typedef OSS_UINT32 duration;
    typedef enum PrioritizationResponseStatus status;

    SignalStatusPackage();
    SignalStatusPackage(const SignalStatusPackage &);
    SignalStatusPackage(const requester &, const inboundOn &, const outboundOn &, 
	minute, second, duration, status);
    SignalStatusPackage(const inboundOn &, status);

    SignalStatusPackage & operator = (const SignalStatusPackage &);
    int operator == (const SignalStatusPackage &) const;
    int operator != (const SignalStatusPackage &) const;

    requester *get_requester();
    const requester *get_requester() const;
    void set_requester(const requester &);
    int requester_is_present() const;
    void omit_requester();

    inboundOn & get_inboundOn();
    const inboundOn & get_inboundOn() const;
    void set_inboundOn(const inboundOn &);

    outboundOn *get_outboundOn();
    const outboundOn *get_outboundOn() const;
    void set_outboundOn(const outboundOn &);
    int outboundOn_is_present() const;
    void omit_outboundOn();

    minute *get_minute();
    const minute *get_minute() const;
    void set_minute(minute);
    int minute_is_present() const;
    void omit_minute();

    second *get_second();
    const second *get_second() const;
    void set_second(second);
    int second_is_present() const;
    void omit_second();

    duration *get_duration();
    const duration *get_duration() const;
    void set_duration(duration);
    int duration_is_present() const;
    void omit_duration();

    status & get_status();
    status get_status() const;
    void set_status(status);
private:
    OSS_UINT32 bit_mask;
    requester requester_field;
    inboundOn inboundOn_field;
    outboundOn outboundOn_field;
    minute minute_field;
    second second_field;
    duration duration_field;
    status status_field;
};

class OSS_PUBLIC AdvisorySpeed   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef enum AdvisorySpeedType type;
    typedef OSS_UINT32 speed;
    typedef enum SpeedConfidence confidence;
    typedef OSS_UINT32 distance;
    typedef OSS_UINT32 AdvisorySpeed_class;

    AdvisorySpeed();
    AdvisorySpeed(const AdvisorySpeed &);
    AdvisorySpeed(type, speed, confidence, distance, AdvisorySpeed_class);
    AdvisorySpeed(type);

    AdvisorySpeed & operator = (const AdvisorySpeed &);
    int operator == (const AdvisorySpeed &) const;
    int operator != (const AdvisorySpeed &) const;

    type & get_type();
    type get_type() const;
    void set_type(type);

    speed *get_speed();
    const speed *get_speed() const;
    void set_speed(speed);
    int speed_is_present() const;
    void omit_speed();

    confidence *get_confidence();
    const confidence *get_confidence() const;
    void set_confidence(confidence);
    int confidence_is_present() const;
    void omit_confidence();

    distance *get_distance();
    const distance *get_distance() const;
    void set_distance(distance);
    int distance_is_present() const;
    void omit_distance();

    AdvisorySpeed_class *get_AdvisorySpeed_class();
    const AdvisorySpeed_class *get_AdvisorySpeed_class() const;
    void set_AdvisorySpeed_class(AdvisorySpeed_class);
    int AdvisorySpeed_class_is_present() const;
    void omit_AdvisorySpeed_class();
private:
    OSS_UINT32 bit_mask;
    type type_field;
    speed speed_field;
    confidence confidence_field;
    distance distance_field;
    AdvisorySpeed_class AdvisorySpeed_class_field;
};

class OSS_PUBLIC RegulatorySpeedLimit   /* SEQUENCE */
{
public:
    void * operator new(size_t size);
    void operator delete(void *ptr);

    typedef enum SpeedLimitType type;
    typedef OSS_UINT32 speed;

    RegulatorySpeedLimit();
    RegulatorySpeedLimit(const RegulatorySpeedLimit &);
    RegulatorySpeedLimit(type, speed);

    RegulatorySpeedLimit & operator = (const RegulatorySpeedLimit &);
    int operator == (const RegulatorySpeedLimit &) const;
    int operator != (const RegulatorySpeedLimit &) const;

    type & get_type();
    type get_type() const;
    void set_type(type);

    speed & get_speed();
    speed get_speed() const;
    void set_speed(speed);
private:
    type type_field;
    speed speed_field;
};

/* Universal PDU class */

class OSS_PUBLIC VehicleIDFrameModule_PDU : public UniversalPDU {
public:
    VehicleIDFrameModule_PDU();
    void set_AccelSteerYawRateConfidence(AccelSteerYawRateConfidence &);
    AccelSteerYawRateConfidence *get_AccelSteerYawRateConfidence() const;
    void set_ApproachOrLane(ApproachOrLane &);
    ApproachOrLane *get_ApproachOrLane() const;
    void set_AmbientAirPressure(AmbientAirPressure &);
    AmbientAirPressure *get_AmbientAirPressure() const;
    void set_AmbientAirTemperature(AmbientAirTemperature &);
    AmbientAirTemperature *get_AmbientAirTemperature() const;
    void set_AttachmentRadius(AttachmentRadius &);
    AttachmentRadius *get_AttachmentRadius() const;
    void set_BasicVehicleClass(BasicVehicleClass &);
    BasicVehicleClass *get_BasicVehicleClass() const;
    void set_BumperHeight(BumperHeight &);
    BumperHeight *get_BumperHeight() const;
    void set_CoefficientOfFriction(CoefficientOfFriction &);
    CoefficientOfFriction *get_CoefficientOfFriction() const;
    void set_Count(Count &);
    Count *get_Count() const;
    void set_DrivingWheelAngle(DrivingWheelAngle &);
    DrivingWheelAngle *get_DrivingWheelAngle() const;
    void set_DSRCmsgIDType(DSRCmsgIDType &);
    DSRCmsgIDType *get_DSRCmsgIDType() const;
    void set_Duration(Duration &);
    Duration *get_Duration() const;
    void set_FuelType(FuelType &);
    FuelType *get_FuelType() const;
    void set_GrossDistance(GrossDistance &);
    GrossDistance *get_GrossDistance() const;
    void set_GrossSpeed(GrossSpeed &);
    GrossSpeed *get_GrossSpeed() const;
    void set_AxleLocation(AxleLocation &);
    AxleLocation *get_AxleLocation() const;
    void set_AxleWeight(AxleWeight &);
    AxleWeight *get_AxleWeight() const;
    void set_CargoWeight(CargoWeight &);
    CargoWeight *get_CargoWeight() const;
    void set_DriveAxleLiftAirPressure(DriveAxleLiftAirPressure &);
    DriveAxleLiftAirPressure *get_DriveAxleLiftAirPressure() const;
    void set_DriveAxleLocation(DriveAxleLocation &);
    DriveAxleLocation *get_DriveAxleLocation() const;
    void set_DriveAxleLubePressure(DriveAxleLubePressure &);
    DriveAxleLubePressure *get_DriveAxleLubePressure() const;
    void set_DriveAxleTemperature(DriveAxleTemperature &);
    DriveAxleTemperature *get_DriveAxleTemperature() const;
    void set_SteeringAxleLubePressure(SteeringAxleLubePressure &);
    SteeringAxleLubePressure *get_SteeringAxleLubePressure() const;
    void set_SteeringAxleTemperature(SteeringAxleTemperature &);
    SteeringAxleTemperature *get_SteeringAxleTemperature() const;
    void set_TireLeakageRate(TireLeakageRate &);
    TireLeakageRate *get_TireLeakageRate() const;
    void set_TireLocation(TireLocation &);
    TireLocation *get_TireLocation() const;
    void set_TirePressure(TirePressure &);
    TirePressure *get_TirePressure() const;
    void set_TireTemp(TireTemp &);
    TireTemp *get_TireTemp() const;
    void set_TrailerWeight(TrailerWeight &);
    TrailerWeight *get_TrailerWeight() const;
    void set_MinutesDuration(MinutesDuration &);
    MinutesDuration *get_MinutesDuration() const;
    void set_NMEA_MsgType(NMEA_MsgType &);
    NMEA_MsgType *get_NMEA_MsgType() const;
    void set_ObjectCount(ObjectCount &);
    ObjectCount *get_ObjectCount() const;
    void set_ObstacleDistance(ObstacleDistance &);
    ObstacleDistance *get_ObstacleDistance() const;
    void set_Offset_B09(Offset_B09 &);
    Offset_B09 *get_Offset_B09() const;
    void set_OffsetLL_B12(OffsetLL_B12 &);
    OffsetLL_B12 *get_OffsetLL_B12() const;
    void set_OffsetLL_B14(OffsetLL_B14 &);
    OffsetLL_B14 *get_OffsetLL_B14() const;
    void set_OffsetLL_B16(OffsetLL_B16 &);
    OffsetLL_B16 *get_OffsetLL_B16() const;
    void set_OffsetLL_B22(OffsetLL_B22 &);
    OffsetLL_B22 *get_OffsetLL_B22() const;
    void set_OffsetLL_B24(OffsetLL_B24 &);
    OffsetLL_B24 *get_OffsetLL_B24() const;
    void set_PersonalClusterRadius(PersonalClusterRadius &);
    PersonalClusterRadius *get_PersonalClusterRadius() const;
    void set_ProbeSegmentNumber(ProbeSegmentNumber &);
    ProbeSegmentNumber *get_ProbeSegmentNumber() const;
    void set_Radius_B12(Radius_B12 &);
    Radius_B12 *get_Radius_B12() const;
    void set_RegionId(RegionId &);
    RegionId *get_RegionId() const;
    void set_SecondOfTime(SecondOfTime &);
    SecondOfTime *get_SecondOfTime() const;
    void set_SignPrority(SignPrority &);
    SignPrority *get_SignPrority() const;
    void set_SteeringWheelAngleRateOfChange(SteeringWheelAngleRateOfChange &);
    SteeringWheelAngleRateOfChange *get_SteeringWheelAngleRateOfChange() const;
    void set_SunSensor(SunSensor &);
    SunSensor *get_SunSensor() const;
    void set_TermDistance(TermDistance &);
    TermDistance *get_TermDistance() const;
    void set_TermTime(TermTime &);
    TermTime *get_TermTime() const;
    void set_ThrottlePosition(ThrottlePosition &);
    ThrottlePosition *get_ThrottlePosition() const;
    void set_TrailerMass(TrailerMass &);
    TrailerMass *get_TrailerMass() const;
    void set_VehicleHeight(VehicleHeight &);
    VehicleHeight *get_VehicleHeight() const;
    void set_VertOffset_B07(VertOffset_B07 &);
    VertOffset_B07 *get_VertOffset_B07() const;
    void set_VertOffset_B08(VertOffset_B08 &);
    VertOffset_B08 *get_VertOffset_B08() const;
    void set_VertOffset_B09(VertOffset_B09 &);
    VertOffset_B09 *get_VertOffset_B09() const;
    void set_VertOffset_B10(VertOffset_B10 &);
    VertOffset_B10 *get_VertOffset_B10() const;
    void set_VertOffset_B11(VertOffset_B11 &);
    VertOffset_B11 *get_VertOffset_B11() const;
    void set_WiperRate(WiperRate &);
    WiperRate *get_WiperRate() const;
    void set_Zoom(Zoom &);
    Zoom *get_Zoom() const;
    void set_AltitudeValue(AltitudeValue &);
    AltitudeValue *get_AltitudeValue() const;
    void set_Day(Day &);
    Day *get_Day() const;
    void set_DegreesLat(DegreesLat &);
    DegreesLat *get_DegreesLat() const;
    void set_DegreesLong(DegreesLong &);
    DegreesLong *get_DegreesLong() const;
    void set_Hour(Hour &);
    Hour *get_Hour() const;
    void set_LatitudeDMS(LatitudeDMS &);
    LatitudeDMS *get_LatitudeDMS() const;
    void set_LongitudeDMS(LongitudeDMS &);
    LongitudeDMS *get_LongitudeDMS() const;
    void set_MaxTimetoChange(MaxTimetoChange &);
    MaxTimetoChange *get_MaxTimetoChange() const;
    void set_MinTimetoChange(MinTimetoChange &);
    MinTimetoChange *get_MinTimetoChange() const;
    void set_Minute(Minute &);
    Minute *get_Minute() const;
    void set_MinutesAngle(MinutesAngle &);
    MinutesAngle *get_MinutesAngle() const;
    void set_Month(Month &);
    Month *get_Month() const;
    void set_Second(Second &);
    Second *get_Second() const;
    void set_SecondsAngle(SecondsAngle &);
    SecondsAngle *get_SecondsAngle() const;
    void set_TenthSecond(TenthSecond &);
    TenthSecond *get_TenthSecond() const;
    void set_TimeRemaining(TimeRemaining &);
    TimeRemaining *get_TimeRemaining() const;
    void set_Year(Year &);
    Year *get_Year() const;
    void set_EssMobileFriction(EssMobileFriction &);
    EssMobileFriction *get_EssMobileFriction() const;
    void set_EssPrecipRate(EssPrecipRate &);
    EssPrecipRate *get_EssPrecipRate() const;
    void set_EssSolarRadiation(EssSolarRadiation &);
    EssSolarRadiation *get_EssSolarRadiation() const;
    void set_ITIScodes(ITIScodes &);
    ITIScodes *get_ITIScodes() const;
    void set_AnimalPropelledType(AnimalPropelledType &);
    AnimalPropelledType *get_AnimalPropelledType() const;
    void set_AnimalType(AnimalType &);
    AnimalType *get_AnimalType() const;
    void set_Attachment(Attachment &);
    Attachment *get_Attachment() const;
    void set_BrakeAppliedPressure(BrakeAppliedPressure &);
    BrakeAppliedPressure *get_BrakeAppliedPressure() const;
    void set_CodeWord(CodeWord &);
    CodeWord *get_CodeWord() const;
    void set_DirectionOfUse(DirectionOfUse &);
    DirectionOfUse *get_DirectionOfUse() const;
    void set_DistanceUnits(DistanceUnits &);
    DistanceUnits *get_DistanceUnits() const;
    void set_ExteriorLights(ExteriorLights &);
    ExteriorLights *get_ExteriorLights() const;
    void set_HumanPropelledType(HumanPropelledType &);
    HumanPropelledType *get_HumanPropelledType() const;
    void set_IsDolly(IsDolly &);
    IsDolly *get_IsDolly() const;
    void set_TirePressureThresholdDetection(TirePressureThresholdDetection &);
    TirePressureThresholdDetection *get_TirePressureThresholdDetection() const;
    void set_WheelEndElectFault(WheelEndElectFault &);
    WheelEndElectFault *get_WheelEndElectFault() const;
    void set_WheelSensorStatus(WheelSensorStatus &);
    WheelSensorStatus *get_WheelSensorStatus() const;
    void set_Location_quality(Location_quality &);
    Location_quality *get_Location_quality() const;
    void set_Location_tech(Location_tech &);
    Location_tech *get_Location_tech() const;
    void set_MessageBLOB(MessageBLOB &);
    MessageBLOB *get_MessageBLOB() const;
    void set_MotorizedPropelledType(MotorizedPropelledType &);
    MotorizedPropelledType *get_MotorizedPropelledType() const;
    void set_MsgCRC(MsgCRC &);
    MsgCRC *get_MsgCRC() const;
    void set_MUTCDCode(MUTCDCode &);
    MUTCDCode *get_MUTCDCode() const;
    void set_NMEA_Payload(NMEA_Payload &);
    NMEA_Payload *get_NMEA_Payload() const;
    void set_NMEA_Revision(NMEA_Revision &);
    NMEA_Revision *get_NMEA_Revision() const;
    void set_NodeAttributeLL(NodeAttributeLL &);
    NodeAttributeLL *get_NodeAttributeLL() const;
    void set_NumberOfParticipantsInCluster(NumberOfParticipantsInCluster &);
    NumberOfParticipantsInCluster *get_NumberOfParticipantsInCluster() const;
    void set_PayloadData(PayloadData &);
    PayloadData *get_PayloadData() const;
    void set_PersonalAssistive(PersonalAssistive &);
    PersonalAssistive *get_PersonalAssistive() const;
    void set_PersonalCrossingInProgress(PersonalCrossingInProgress &);
    PersonalCrossingInProgress *get_PersonalCrossingInProgress() const;
    void set_PersonalCrossingRequest(PersonalCrossingRequest &);
    PersonalCrossingRequest *get_PersonalCrossingRequest() const;
    void set_PersonalDeviceUsageState(PersonalDeviceUsageState &);
    PersonalDeviceUsageState *get_PersonalDeviceUsageState() const;
    void set_PersonalDeviceUserType(PersonalDeviceUserType &);
    PersonalDeviceUserType *get_PersonalDeviceUserType() const;
    void set_PivotingAllowed(PivotingAllowed &);
    PivotingAllowed *get_PivotingAllowed() const;
    void set_PublicSafetyAndRoadWorkerActivity(PublicSafetyAndRoadWorkerActivity &);
    PublicSafetyAndRoadWorkerActivity *get_PublicSafetyAndRoadWorkerActivity() const;
    void set_PublicSafetyDirectingTrafficSubType(PublicSafetyDirectingTrafficSubType &);
    PublicSafetyDirectingTrafficSubType *get_PublicSafetyDirectingTrafficSubType() const;
    void set_PublicSafetyEventResponderWorkerType(PublicSafetyEventResponderWorkerType &);
    PublicSafetyEventResponderWorkerType *get_PublicSafetyEventResponderWorkerType() const;
    void set_RainSensor(RainSensor &);
    RainSensor *get_RainSensor() const;
    void set_RequestedItem(RequestedItem &);
    RequestedItem *get_RequestedItem() const;
    void set_RTCM_Revision(RTCM_Revision &);
    RTCM_Revision *get_RTCM_Revision() const;
    void set_RTCMmessage(RTCMmessage &);
    RTCMmessage *get_RTCMmessage() const;
    void set_SegmentAttributeLL(SegmentAttributeLL &);
    SegmentAttributeLL *get_SegmentAttributeLL() const;
    void set_SignalReqScheme(SignalReqScheme &);
    SignalReqScheme *get_SignalReqScheme() const;
    void set_TransitStatus(TransitStatus &);
    TransitStatus *get_TransitStatus() const;
    void set_TravelerInfoType(TravelerInfoType &);
    TravelerInfoType *get_TravelerInfoType() const;
    void set_UniqueMSGID(UniqueMSGID &);
    UniqueMSGID *get_UniqueMSGID() const;
    void set_UserSizeAndBehaviour(UserSizeAndBehaviour &);
    UserSizeAndBehaviour *get_UserSizeAndBehaviour() const;
    void set_VehicleEventFlags(VehicleEventFlags &);
    VehicleEventFlags *get_VehicleEventFlags() const;
    void set_VehicleStatusDeviceTypeTag(VehicleStatusDeviceTypeTag &);
    VehicleStatusDeviceTypeTag *get_VehicleStatusDeviceTypeTag() const;
    void set_VerticalAccelerationThreshold(VerticalAccelerationThreshold &);
    VerticalAccelerationThreshold *get_VerticalAccelerationThreshold() const;
    void set_VINstring(VINstring &);
    VINstring *get_VINstring() const;
    void set_WaitOnStopline(WaitOnStopline &);
    WaitOnStopline *get_WaitOnStopline() const;
    void set_WiperStatus(WiperStatus &);
    WiperStatus *get_WiperStatus() const;
    void set_DDate(DDate &);
    DDate *get_DDate() const;
    void set_DFullTime(DFullTime &);
    DFullTime *get_DFullTime() const;
    void set_DMonthDay(DMonthDay &);
    DMonthDay *get_DMonthDay() const;
    void set_DYearMonth(DYearMonth &);
    DYearMonth *get_DYearMonth() const;
    void set_BasicSafetyMessage(BasicSafetyMessage &);
    BasicSafetyMessage *get_BasicSafetyMessage() const;
    void set_EmergencyVehicleAlert(EmergencyVehicleAlert &);
    EmergencyVehicleAlert *get_EmergencyVehicleAlert() const;
    void set_IntersectionCollision(IntersectionCollision &);
    IntersectionCollision *get_IntersectionCollision() const;
    void set_MapData(MapData &);
    MapData *get_MapData() const;
    void set_SPAT(SPAT &);
    SPAT *get_SPAT() const;
    void set_SignalRequestMessage(SignalRequestMessage &);
    SignalRequestMessage *get_SignalRequestMessage() const;
    void set_SignalStatusMessage(SignalStatusMessage &);
    SignalStatusMessage *get_SignalStatusMessage() const;
    void set_PathHistory(PathHistory &);
    PathHistory *get_PathHistory() const;
    void set_PathPrediction(PathPrediction &);
    PathPrediction *get_PathPrediction() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_AccelSteerYawRateConfidence(const AccelSteerYawRateConfidence &);
    const AccelSteerYawRateConfidence *get_const_AccelSteerYawRateConfidence() const;
    void set_const_ApproachOrLane(const ApproachOrLane &);
    const ApproachOrLane *get_const_ApproachOrLane() const;
    void set_const_AmbientAirPressure(const AmbientAirPressure &);
    const AmbientAirPressure *get_const_AmbientAirPressure() const;
    void set_const_AmbientAirTemperature(const AmbientAirTemperature &);
    const AmbientAirTemperature *get_const_AmbientAirTemperature() const;
    void set_const_AttachmentRadius(const AttachmentRadius &);
    const AttachmentRadius *get_const_AttachmentRadius() const;
    void set_const_BasicVehicleClass(const BasicVehicleClass &);
    const BasicVehicleClass *get_const_BasicVehicleClass() const;
    void set_const_BumperHeight(const BumperHeight &);
    const BumperHeight *get_const_BumperHeight() const;
    void set_const_CoefficientOfFriction(const CoefficientOfFriction &);
    const CoefficientOfFriction *get_const_CoefficientOfFriction() const;
    void set_const_Count(const Count &);
    const Count *get_const_Count() const;
    void set_const_DrivingWheelAngle(const DrivingWheelAngle &);
    const DrivingWheelAngle *get_const_DrivingWheelAngle() const;
    void set_const_DSRCmsgIDType(const DSRCmsgIDType &);
    const DSRCmsgIDType *get_const_DSRCmsgIDType() const;
    void set_const_Duration(const Duration &);
    const Duration *get_const_Duration() const;
    void set_const_FuelType(const FuelType &);
    const FuelType *get_const_FuelType() const;
    void set_const_GrossDistance(const GrossDistance &);
    const GrossDistance *get_const_GrossDistance() const;
    void set_const_GrossSpeed(const GrossSpeed &);
    const GrossSpeed *get_const_GrossSpeed() const;
    void set_const_AxleLocation(const AxleLocation &);
    const AxleLocation *get_const_AxleLocation() const;
    void set_const_AxleWeight(const AxleWeight &);
    const AxleWeight *get_const_AxleWeight() const;
    void set_const_CargoWeight(const CargoWeight &);
    const CargoWeight *get_const_CargoWeight() const;
    void set_const_DriveAxleLiftAirPressure(const DriveAxleLiftAirPressure &);
    const DriveAxleLiftAirPressure *get_const_DriveAxleLiftAirPressure() const;
    void set_const_DriveAxleLocation(const DriveAxleLocation &);
    const DriveAxleLocation *get_const_DriveAxleLocation() const;
    void set_const_DriveAxleLubePressure(const DriveAxleLubePressure &);
    const DriveAxleLubePressure *get_const_DriveAxleLubePressure() const;
    void set_const_DriveAxleTemperature(const DriveAxleTemperature &);
    const DriveAxleTemperature *get_const_DriveAxleTemperature() const;
    void set_const_SteeringAxleLubePressure(const SteeringAxleLubePressure &);
    const SteeringAxleLubePressure *get_const_SteeringAxleLubePressure() const;
    void set_const_SteeringAxleTemperature(const SteeringAxleTemperature &);
    const SteeringAxleTemperature *get_const_SteeringAxleTemperature() const;
    void set_const_TireLeakageRate(const TireLeakageRate &);
    const TireLeakageRate *get_const_TireLeakageRate() const;
    void set_const_TireLocation(const TireLocation &);
    const TireLocation *get_const_TireLocation() const;
    void set_const_TirePressure(const TirePressure &);
    const TirePressure *get_const_TirePressure() const;
    void set_const_TireTemp(const TireTemp &);
    const TireTemp *get_const_TireTemp() const;
    void set_const_TrailerWeight(const TrailerWeight &);
    const TrailerWeight *get_const_TrailerWeight() const;
    void set_const_MinutesDuration(const MinutesDuration &);
    const MinutesDuration *get_const_MinutesDuration() const;
    void set_const_NMEA_MsgType(const NMEA_MsgType &);
    const NMEA_MsgType *get_const_NMEA_MsgType() const;
    void set_const_ObjectCount(const ObjectCount &);
    const ObjectCount *get_const_ObjectCount() const;
    void set_const_ObstacleDistance(const ObstacleDistance &);
    const ObstacleDistance *get_const_ObstacleDistance() const;
    void set_const_Offset_B09(const Offset_B09 &);
    const Offset_B09 *get_const_Offset_B09() const;
    void set_const_OffsetLL_B12(const OffsetLL_B12 &);
    const OffsetLL_B12 *get_const_OffsetLL_B12() const;
    void set_const_OffsetLL_B14(const OffsetLL_B14 &);
    const OffsetLL_B14 *get_const_OffsetLL_B14() const;
    void set_const_OffsetLL_B16(const OffsetLL_B16 &);
    const OffsetLL_B16 *get_const_OffsetLL_B16() const;
    void set_const_OffsetLL_B22(const OffsetLL_B22 &);
    const OffsetLL_B22 *get_const_OffsetLL_B22() const;
    void set_const_OffsetLL_B24(const OffsetLL_B24 &);
    const OffsetLL_B24 *get_const_OffsetLL_B24() const;
    void set_const_PersonalClusterRadius(const PersonalClusterRadius &);
    const PersonalClusterRadius *get_const_PersonalClusterRadius() const;
    void set_const_ProbeSegmentNumber(const ProbeSegmentNumber &);
    const ProbeSegmentNumber *get_const_ProbeSegmentNumber() const;
    void set_const_Radius_B12(const Radius_B12 &);
    const Radius_B12 *get_const_Radius_B12() const;
    void set_const_RegionId(const RegionId &);
    const RegionId *get_const_RegionId() const;
    void set_const_SecondOfTime(const SecondOfTime &);
    const SecondOfTime *get_const_SecondOfTime() const;
    void set_const_SignPrority(const SignPrority &);
    const SignPrority *get_const_SignPrority() const;
    void set_const_SteeringWheelAngleRateOfChange(const SteeringWheelAngleRateOfChange &);
    const SteeringWheelAngleRateOfChange *get_const_SteeringWheelAngleRateOfChange() const;
    void set_const_SunSensor(const SunSensor &);
    const SunSensor *get_const_SunSensor() const;
    void set_const_TermDistance(const TermDistance &);
    const TermDistance *get_const_TermDistance() const;
    void set_const_TermTime(const TermTime &);
    const TermTime *get_const_TermTime() const;
    void set_const_ThrottlePosition(const ThrottlePosition &);
    const ThrottlePosition *get_const_ThrottlePosition() const;
    void set_const_TrailerMass(const TrailerMass &);
    const TrailerMass *get_const_TrailerMass() const;
    void set_const_VehicleHeight(const VehicleHeight &);
    const VehicleHeight *get_const_VehicleHeight() const;
    void set_const_VertOffset_B07(const VertOffset_B07 &);
    const VertOffset_B07 *get_const_VertOffset_B07() const;
    void set_const_VertOffset_B08(const VertOffset_B08 &);
    const VertOffset_B08 *get_const_VertOffset_B08() const;
    void set_const_VertOffset_B09(const VertOffset_B09 &);
    const VertOffset_B09 *get_const_VertOffset_B09() const;
    void set_const_VertOffset_B10(const VertOffset_B10 &);
    const VertOffset_B10 *get_const_VertOffset_B10() const;
    void set_const_VertOffset_B11(const VertOffset_B11 &);
    const VertOffset_B11 *get_const_VertOffset_B11() const;
    void set_const_WiperRate(const WiperRate &);
    const WiperRate *get_const_WiperRate() const;
    void set_const_Zoom(const Zoom &);
    const Zoom *get_const_Zoom() const;
    void set_const_AltitudeValue(const AltitudeValue &);
    const AltitudeValue *get_const_AltitudeValue() const;
    void set_const_Day(const Day &);
    const Day *get_const_Day() const;
    void set_const_DegreesLat(const DegreesLat &);
    const DegreesLat *get_const_DegreesLat() const;
    void set_const_DegreesLong(const DegreesLong &);
    const DegreesLong *get_const_DegreesLong() const;
    void set_const_Hour(const Hour &);
    const Hour *get_const_Hour() const;
    void set_const_LatitudeDMS(const LatitudeDMS &);
    const LatitudeDMS *get_const_LatitudeDMS() const;
    void set_const_LongitudeDMS(const LongitudeDMS &);
    const LongitudeDMS *get_const_LongitudeDMS() const;
    void set_const_MaxTimetoChange(const MaxTimetoChange &);
    const MaxTimetoChange *get_const_MaxTimetoChange() const;
    void set_const_MinTimetoChange(const MinTimetoChange &);
    const MinTimetoChange *get_const_MinTimetoChange() const;
    void set_const_Minute(const Minute &);
    const Minute *get_const_Minute() const;
    void set_const_MinutesAngle(const MinutesAngle &);
    const MinutesAngle *get_const_MinutesAngle() const;
    void set_const_Month(const Month &);
    const Month *get_const_Month() const;
    void set_const_Second(const Second &);
    const Second *get_const_Second() const;
    void set_const_SecondsAngle(const SecondsAngle &);
    const SecondsAngle *get_const_SecondsAngle() const;
    void set_const_TenthSecond(const TenthSecond &);
    const TenthSecond *get_const_TenthSecond() const;
    void set_const_TimeRemaining(const TimeRemaining &);
    const TimeRemaining *get_const_TimeRemaining() const;
    void set_const_Year(const Year &);
    const Year *get_const_Year() const;
    void set_const_EssMobileFriction(const EssMobileFriction &);
    const EssMobileFriction *get_const_EssMobileFriction() const;
    void set_const_EssPrecipRate(const EssPrecipRate &);
    const EssPrecipRate *get_const_EssPrecipRate() const;
    void set_const_EssSolarRadiation(const EssSolarRadiation &);
    const EssSolarRadiation *get_const_EssSolarRadiation() const;
    void set_const_ITIScodes(const ITIScodes &);
    const ITIScodes *get_const_ITIScodes() const;
    void set_const_AnimalPropelledType(const AnimalPropelledType &);
    const AnimalPropelledType *get_const_AnimalPropelledType() const;
    void set_const_AnimalType(const AnimalType &);
    const AnimalType *get_const_AnimalType() const;
    void set_const_Attachment(const Attachment &);
    const Attachment *get_const_Attachment() const;
    void set_const_BrakeAppliedPressure(const BrakeAppliedPressure &);
    const BrakeAppliedPressure *get_const_BrakeAppliedPressure() const;
    void set_const_CodeWord(const CodeWord &);
    const CodeWord *get_const_CodeWord() const;
    void set_const_DirectionOfUse(const DirectionOfUse &);
    const DirectionOfUse *get_const_DirectionOfUse() const;
    void set_const_DistanceUnits(const DistanceUnits &);
    const DistanceUnits *get_const_DistanceUnits() const;
    void set_const_ExteriorLights(const ExteriorLights &);
    const ExteriorLights *get_const_ExteriorLights() const;
    void set_const_HumanPropelledType(const HumanPropelledType &);
    const HumanPropelledType *get_const_HumanPropelledType() const;
    void set_const_IsDolly(const IsDolly &);
    const IsDolly *get_const_IsDolly() const;
    void set_const_TirePressureThresholdDetection(const TirePressureThresholdDetection &);
    const TirePressureThresholdDetection *get_const_TirePressureThresholdDetection() const;
    void set_const_WheelEndElectFault(const WheelEndElectFault &);
    const WheelEndElectFault *get_const_WheelEndElectFault() const;
    void set_const_WheelSensorStatus(const WheelSensorStatus &);
    const WheelSensorStatus *get_const_WheelSensorStatus() const;
    void set_const_Location_quality(const Location_quality &);
    const Location_quality *get_const_Location_quality() const;
    void set_const_Location_tech(const Location_tech &);
    const Location_tech *get_const_Location_tech() const;
    void set_const_MessageBLOB(const MessageBLOB &);
    const MessageBLOB *get_const_MessageBLOB() const;
    void set_const_MotorizedPropelledType(const MotorizedPropelledType &);
    const MotorizedPropelledType *get_const_MotorizedPropelledType() const;
    void set_const_MsgCRC(const MsgCRC &);
    const MsgCRC *get_const_MsgCRC() const;
    void set_const_MUTCDCode(const MUTCDCode &);
    const MUTCDCode *get_const_MUTCDCode() const;
    void set_const_NMEA_Payload(const NMEA_Payload &);
    const NMEA_Payload *get_const_NMEA_Payload() const;
    void set_const_NMEA_Revision(const NMEA_Revision &);
    const NMEA_Revision *get_const_NMEA_Revision() const;
    void set_const_NodeAttributeLL(const NodeAttributeLL &);
    const NodeAttributeLL *get_const_NodeAttributeLL() const;
    void set_const_NumberOfParticipantsInCluster(const NumberOfParticipantsInCluster &);
    const NumberOfParticipantsInCluster *get_const_NumberOfParticipantsInCluster() const;
    void set_const_PayloadData(const PayloadData &);
    const PayloadData *get_const_PayloadData() const;
    void set_const_PersonalAssistive(const PersonalAssistive &);
    const PersonalAssistive *get_const_PersonalAssistive() const;
    void set_const_PersonalCrossingInProgress(const PersonalCrossingInProgress &);
    const PersonalCrossingInProgress *get_const_PersonalCrossingInProgress() const;
    void set_const_PersonalCrossingRequest(const PersonalCrossingRequest &);
    const PersonalCrossingRequest *get_const_PersonalCrossingRequest() const;
    void set_const_PersonalDeviceUsageState(const PersonalDeviceUsageState &);
    const PersonalDeviceUsageState *get_const_PersonalDeviceUsageState() const;
    void set_const_PersonalDeviceUserType(const PersonalDeviceUserType &);
    const PersonalDeviceUserType *get_const_PersonalDeviceUserType() const;
    void set_const_PivotingAllowed(const PivotingAllowed &);
    const PivotingAllowed *get_const_PivotingAllowed() const;
    void set_const_PublicSafetyAndRoadWorkerActivity(const PublicSafetyAndRoadWorkerActivity &);
    const PublicSafetyAndRoadWorkerActivity *get_const_PublicSafetyAndRoadWorkerActivity() const;
    void set_const_PublicSafetyDirectingTrafficSubType(const PublicSafetyDirectingTrafficSubType &);
    const PublicSafetyDirectingTrafficSubType *get_const_PublicSafetyDirectingTrafficSubType() const;
    void set_const_PublicSafetyEventResponderWorkerType(const PublicSafetyEventResponderWorkerType &);
    const PublicSafetyEventResponderWorkerType *get_const_PublicSafetyEventResponderWorkerType() const;
    void set_const_RainSensor(const RainSensor &);
    const RainSensor *get_const_RainSensor() const;
    void set_const_RequestedItem(const RequestedItem &);
    const RequestedItem *get_const_RequestedItem() const;
    void set_const_RTCM_Revision(const RTCM_Revision &);
    const RTCM_Revision *get_const_RTCM_Revision() const;
    void set_const_RTCMmessage(const RTCMmessage &);
    const RTCMmessage *get_const_RTCMmessage() const;
    void set_const_SegmentAttributeLL(const SegmentAttributeLL &);
    const SegmentAttributeLL *get_const_SegmentAttributeLL() const;
    void set_const_SignalReqScheme(const SignalReqScheme &);
    const SignalReqScheme *get_const_SignalReqScheme() const;
    void set_const_TransitStatus(const TransitStatus &);
    const TransitStatus *get_const_TransitStatus() const;
    void set_const_TravelerInfoType(const TravelerInfoType &);
    const TravelerInfoType *get_const_TravelerInfoType() const;
    void set_const_UniqueMSGID(const UniqueMSGID &);
    const UniqueMSGID *get_const_UniqueMSGID() const;
    void set_const_UserSizeAndBehaviour(const UserSizeAndBehaviour &);
    const UserSizeAndBehaviour *get_const_UserSizeAndBehaviour() const;
    void set_const_VehicleEventFlags(const VehicleEventFlags &);
    const VehicleEventFlags *get_const_VehicleEventFlags() const;
    void set_const_VehicleStatusDeviceTypeTag(const VehicleStatusDeviceTypeTag &);
    const VehicleStatusDeviceTypeTag *get_const_VehicleStatusDeviceTypeTag() const;
    void set_const_VerticalAccelerationThreshold(const VerticalAccelerationThreshold &);
    const VerticalAccelerationThreshold *get_const_VerticalAccelerationThreshold() const;
    void set_const_VINstring(const VINstring &);
    const VINstring *get_const_VINstring() const;
    void set_const_WaitOnStopline(const WaitOnStopline &);
    const WaitOnStopline *get_const_WaitOnStopline() const;
    void set_const_WiperStatus(const WiperStatus &);
    const WiperStatus *get_const_WiperStatus() const;
    void set_const_DDate(const DDate &);
    const DDate *get_const_DDate() const;
    void set_const_DFullTime(const DFullTime &);
    const DFullTime *get_const_DFullTime() const;
    void set_const_DMonthDay(const DMonthDay &);
    const DMonthDay *get_const_DMonthDay() const;
    void set_const_DYearMonth(const DYearMonth &);
    const DYearMonth *get_const_DYearMonth() const;
    void set_const_BasicSafetyMessage(const BasicSafetyMessage &);
    const BasicSafetyMessage *get_const_BasicSafetyMessage() const;
    void set_const_EmergencyVehicleAlert(const EmergencyVehicleAlert &);
    const EmergencyVehicleAlert *get_const_EmergencyVehicleAlert() const;
    void set_const_IntersectionCollision(const IntersectionCollision &);
    const IntersectionCollision *get_const_IntersectionCollision() const;
    void set_const_MapData(const MapData &);
    const MapData *get_const_MapData() const;
    void set_const_SPAT(const SPAT &);
    const SPAT *get_const_SPAT() const;
    void set_const_SignalRequestMessage(const SignalRequestMessage &);
    const SignalRequestMessage *get_const_SignalRequestMessage() const;
    void set_const_SignalStatusMessage(const SignalStatusMessage &);
    const SignalStatusMessage *get_const_SignalStatusMessage() const;
    void set_const_PathHistory(const PathHistory &);
    const PathHistory *get_const_PathHistory() const;
    void set_const_PathPrediction(const PathPrediction &);
    const PathPrediction *get_const_PathPrediction() const;
#endif
};

/* Specific PDU classes */

class OSS_PUBLIC AccelSteerYawRateConfidence_PDU : public ConcretePDU {
public:
    AccelSteerYawRateConfidence_PDU();
    void set_data(AccelSteerYawRateConfidence &);
    AccelSteerYawRateConfidence *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const AccelSteerYawRateConfidence & d);
    const AccelSteerYawRateConfidence *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC ApproachOrLane_PDU : public ConcretePDU {
public:
    ApproachOrLane_PDU();
    void set_data(ApproachOrLane &);
    ApproachOrLane *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const ApproachOrLane & d);
    const ApproachOrLane *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC AmbientAirPressure_PDU : public ConcretePDU {
public:
    AmbientAirPressure_PDU();
    void set_data(AmbientAirPressure &);
    AmbientAirPressure *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const AmbientAirPressure & d);
    const AmbientAirPressure *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC AmbientAirTemperature_PDU : public ConcretePDU {
public:
    AmbientAirTemperature_PDU();
    void set_data(AmbientAirTemperature &);
    AmbientAirTemperature *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const AmbientAirTemperature & d);
    const AmbientAirTemperature *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC AttachmentRadius_PDU : public ConcretePDU {
public:
    AttachmentRadius_PDU();
    void set_data(AttachmentRadius &);
    AttachmentRadius *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const AttachmentRadius & d);
    const AttachmentRadius *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC BasicVehicleClass_PDU : public ConcretePDU {
public:
    BasicVehicleClass_PDU();
    void set_data(BasicVehicleClass &);
    BasicVehicleClass *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const BasicVehicleClass & d);
    const BasicVehicleClass *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC BumperHeight_PDU : public ConcretePDU {
public:
    BumperHeight_PDU();
    void set_data(BumperHeight &);
    BumperHeight *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const BumperHeight & d);
    const BumperHeight *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC CoefficientOfFriction_PDU : public ConcretePDU {
public:
    CoefficientOfFriction_PDU();
    void set_data(CoefficientOfFriction &);
    CoefficientOfFriction *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const CoefficientOfFriction & d);
    const CoefficientOfFriction *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Count_PDU : public ConcretePDU {
public:
    Count_PDU();
    void set_data(Count &);
    Count *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Count & d);
    const Count *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC DrivingWheelAngle_PDU : public ConcretePDU {
public:
    DrivingWheelAngle_PDU();
    void set_data(DrivingWheelAngle &);
    DrivingWheelAngle *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const DrivingWheelAngle & d);
    const DrivingWheelAngle *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC DSRCmsgIDType_PDU : public ConcretePDU {
public:
    DSRCmsgIDType_PDU();
    void set_data(DSRCmsgIDType &);
    DSRCmsgIDType *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const DSRCmsgIDType & d);
    const DSRCmsgIDType *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Duration_PDU : public ConcretePDU {
public:
    Duration_PDU();
    void set_data(Duration &);
    Duration *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Duration & d);
    const Duration *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC FuelType_PDU : public ConcretePDU {
public:
    FuelType_PDU();
    void set_data(FuelType &);
    FuelType *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const FuelType & d);
    const FuelType *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC GrossDistance_PDU : public ConcretePDU {
public:
    GrossDistance_PDU();
    void set_data(GrossDistance &);
    GrossDistance *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const GrossDistance & d);
    const GrossDistance *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC GrossSpeed_PDU : public ConcretePDU {
public:
    GrossSpeed_PDU();
    void set_data(GrossSpeed &);
    GrossSpeed *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const GrossSpeed & d);
    const GrossSpeed *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC AxleLocation_PDU : public ConcretePDU {
public:
    AxleLocation_PDU();
    void set_data(AxleLocation &);
    AxleLocation *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const AxleLocation & d);
    const AxleLocation *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC AxleWeight_PDU : public ConcretePDU {
public:
    AxleWeight_PDU();
    void set_data(AxleWeight &);
    AxleWeight *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const AxleWeight & d);
    const AxleWeight *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC CargoWeight_PDU : public ConcretePDU {
public:
    CargoWeight_PDU();
    void set_data(CargoWeight &);
    CargoWeight *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const CargoWeight & d);
    const CargoWeight *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC DriveAxleLiftAirPressure_PDU : public ConcretePDU {
public:
    DriveAxleLiftAirPressure_PDU();
    void set_data(DriveAxleLiftAirPressure &);
    DriveAxleLiftAirPressure *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const DriveAxleLiftAirPressure & d);
    const DriveAxleLiftAirPressure *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC DriveAxleLocation_PDU : public ConcretePDU {
public:
    DriveAxleLocation_PDU();
    void set_data(DriveAxleLocation &);
    DriveAxleLocation *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const DriveAxleLocation & d);
    const DriveAxleLocation *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC DriveAxleLubePressure_PDU : public ConcretePDU {
public:
    DriveAxleLubePressure_PDU();
    void set_data(DriveAxleLubePressure &);
    DriveAxleLubePressure *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const DriveAxleLubePressure & d);
    const DriveAxleLubePressure *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC DriveAxleTemperature_PDU : public ConcretePDU {
public:
    DriveAxleTemperature_PDU();
    void set_data(DriveAxleTemperature &);
    DriveAxleTemperature *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const DriveAxleTemperature & d);
    const DriveAxleTemperature *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC SteeringAxleLubePressure_PDU : public ConcretePDU {
public:
    SteeringAxleLubePressure_PDU();
    void set_data(SteeringAxleLubePressure &);
    SteeringAxleLubePressure *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const SteeringAxleLubePressure & d);
    const SteeringAxleLubePressure *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC SteeringAxleTemperature_PDU : public ConcretePDU {
public:
    SteeringAxleTemperature_PDU();
    void set_data(SteeringAxleTemperature &);
    SteeringAxleTemperature *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const SteeringAxleTemperature & d);
    const SteeringAxleTemperature *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC TireLeakageRate_PDU : public ConcretePDU {
public:
    TireLeakageRate_PDU();
    void set_data(TireLeakageRate &);
    TireLeakageRate *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const TireLeakageRate & d);
    const TireLeakageRate *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC TireLocation_PDU : public ConcretePDU {
public:
    TireLocation_PDU();
    void set_data(TireLocation &);
    TireLocation *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const TireLocation & d);
    const TireLocation *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC TirePressure_PDU : public ConcretePDU {
public:
    TirePressure_PDU();
    void set_data(TirePressure &);
    TirePressure *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const TirePressure & d);
    const TirePressure *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC TireTemp_PDU : public ConcretePDU {
public:
    TireTemp_PDU();
    void set_data(TireTemp &);
    TireTemp *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const TireTemp & d);
    const TireTemp *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC TrailerWeight_PDU : public ConcretePDU {
public:
    TrailerWeight_PDU();
    void set_data(TrailerWeight &);
    TrailerWeight *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const TrailerWeight & d);
    const TrailerWeight *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC MinutesDuration_PDU : public ConcretePDU {
public:
    MinutesDuration_PDU();
    void set_data(MinutesDuration &);
    MinutesDuration *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const MinutesDuration & d);
    const MinutesDuration *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC NMEA_MsgType_PDU : public ConcretePDU {
public:
    NMEA_MsgType_PDU();
    void set_data(NMEA_MsgType &);
    NMEA_MsgType *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const NMEA_MsgType & d);
    const NMEA_MsgType *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC ObjectCount_PDU : public ConcretePDU {
public:
    ObjectCount_PDU();
    void set_data(ObjectCount &);
    ObjectCount *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const ObjectCount & d);
    const ObjectCount *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC ObstacleDistance_PDU : public ConcretePDU {
public:
    ObstacleDistance_PDU();
    void set_data(ObstacleDistance &);
    ObstacleDistance *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const ObstacleDistance & d);
    const ObstacleDistance *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Offset_B09_PDU : public ConcretePDU {
public:
    Offset_B09_PDU();
    void set_data(Offset_B09 &);
    Offset_B09 *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Offset_B09 & d);
    const Offset_B09 *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC OffsetLL_B12_PDU : public ConcretePDU {
public:
    OffsetLL_B12_PDU();
    void set_data(OffsetLL_B12 &);
    OffsetLL_B12 *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const OffsetLL_B12 & d);
    const OffsetLL_B12 *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC OffsetLL_B14_PDU : public ConcretePDU {
public:
    OffsetLL_B14_PDU();
    void set_data(OffsetLL_B14 &);
    OffsetLL_B14 *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const OffsetLL_B14 & d);
    const OffsetLL_B14 *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC OffsetLL_B16_PDU : public ConcretePDU {
public:
    OffsetLL_B16_PDU();
    void set_data(OffsetLL_B16 &);
    OffsetLL_B16 *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const OffsetLL_B16 & d);
    const OffsetLL_B16 *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC OffsetLL_B22_PDU : public ConcretePDU {
public:
    OffsetLL_B22_PDU();
    void set_data(OffsetLL_B22 &);
    OffsetLL_B22 *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const OffsetLL_B22 & d);
    const OffsetLL_B22 *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC OffsetLL_B24_PDU : public ConcretePDU {
public:
    OffsetLL_B24_PDU();
    void set_data(OffsetLL_B24 &);
    OffsetLL_B24 *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const OffsetLL_B24 & d);
    const OffsetLL_B24 *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC PersonalClusterRadius_PDU : public ConcretePDU {
public:
    PersonalClusterRadius_PDU();
    void set_data(PersonalClusterRadius &);
    PersonalClusterRadius *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const PersonalClusterRadius & d);
    const PersonalClusterRadius *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC ProbeSegmentNumber_PDU : public ConcretePDU {
public:
    ProbeSegmentNumber_PDU();
    void set_data(ProbeSegmentNumber &);
    ProbeSegmentNumber *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const ProbeSegmentNumber & d);
    const ProbeSegmentNumber *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Radius_B12_PDU : public ConcretePDU {
public:
    Radius_B12_PDU();
    void set_data(Radius_B12 &);
    Radius_B12 *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Radius_B12 & d);
    const Radius_B12 *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC RegionId_PDU : public ConcretePDU {
public:
    RegionId_PDU();
    void set_data(RegionId &);
    RegionId *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const RegionId & d);
    const RegionId *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC SecondOfTime_PDU : public ConcretePDU {
public:
    SecondOfTime_PDU();
    void set_data(SecondOfTime &);
    SecondOfTime *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const SecondOfTime & d);
    const SecondOfTime *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC SignPrority_PDU : public ConcretePDU {
public:
    SignPrority_PDU();
    void set_data(SignPrority &);
    SignPrority *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const SignPrority & d);
    const SignPrority *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC SteeringWheelAngleRateOfChange_PDU : public ConcretePDU {
public:
    SteeringWheelAngleRateOfChange_PDU();
    void set_data(SteeringWheelAngleRateOfChange &);
    SteeringWheelAngleRateOfChange *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const SteeringWheelAngleRateOfChange & d);
    const SteeringWheelAngleRateOfChange *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC SunSensor_PDU : public ConcretePDU {
public:
    SunSensor_PDU();
    void set_data(SunSensor &);
    SunSensor *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const SunSensor & d);
    const SunSensor *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC TermDistance_PDU : public ConcretePDU {
public:
    TermDistance_PDU();
    void set_data(TermDistance &);
    TermDistance *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const TermDistance & d);
    const TermDistance *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC TermTime_PDU : public ConcretePDU {
public:
    TermTime_PDU();
    void set_data(TermTime &);
    TermTime *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const TermTime & d);
    const TermTime *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC ThrottlePosition_PDU : public ConcretePDU {
public:
    ThrottlePosition_PDU();
    void set_data(ThrottlePosition &);
    ThrottlePosition *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const ThrottlePosition & d);
    const ThrottlePosition *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC TrailerMass_PDU : public ConcretePDU {
public:
    TrailerMass_PDU();
    void set_data(TrailerMass &);
    TrailerMass *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const TrailerMass & d);
    const TrailerMass *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC VehicleHeight_PDU : public ConcretePDU {
public:
    VehicleHeight_PDU();
    void set_data(VehicleHeight &);
    VehicleHeight *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const VehicleHeight & d);
    const VehicleHeight *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC VertOffset_B07_PDU : public ConcretePDU {
public:
    VertOffset_B07_PDU();
    void set_data(VertOffset_B07 &);
    VertOffset_B07 *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const VertOffset_B07 & d);
    const VertOffset_B07 *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC VertOffset_B08_PDU : public ConcretePDU {
public:
    VertOffset_B08_PDU();
    void set_data(VertOffset_B08 &);
    VertOffset_B08 *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const VertOffset_B08 & d);
    const VertOffset_B08 *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC VertOffset_B09_PDU : public ConcretePDU {
public:
    VertOffset_B09_PDU();
    void set_data(VertOffset_B09 &);
    VertOffset_B09 *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const VertOffset_B09 & d);
    const VertOffset_B09 *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC VertOffset_B10_PDU : public ConcretePDU {
public:
    VertOffset_B10_PDU();
    void set_data(VertOffset_B10 &);
    VertOffset_B10 *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const VertOffset_B10 & d);
    const VertOffset_B10 *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC VertOffset_B11_PDU : public ConcretePDU {
public:
    VertOffset_B11_PDU();
    void set_data(VertOffset_B11 &);
    VertOffset_B11 *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const VertOffset_B11 & d);
    const VertOffset_B11 *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC WiperRate_PDU : public ConcretePDU {
public:
    WiperRate_PDU();
    void set_data(WiperRate &);
    WiperRate *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const WiperRate & d);
    const WiperRate *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Zoom_PDU : public ConcretePDU {
public:
    Zoom_PDU();
    void set_data(Zoom &);
    Zoom *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Zoom & d);
    const Zoom *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC AltitudeValue_PDU : public ConcretePDU {
public:
    AltitudeValue_PDU();
    void set_data(AltitudeValue &);
    AltitudeValue *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const AltitudeValue & d);
    const AltitudeValue *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Day_PDU : public ConcretePDU {
public:
    Day_PDU();
    void set_data(Day &);
    Day *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Day & d);
    const Day *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC DegreesLat_PDU : public ConcretePDU {
public:
    DegreesLat_PDU();
    void set_data(DegreesLat &);
    DegreesLat *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const DegreesLat & d);
    const DegreesLat *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC DegreesLong_PDU : public ConcretePDU {
public:
    DegreesLong_PDU();
    void set_data(DegreesLong &);
    DegreesLong *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const DegreesLong & d);
    const DegreesLong *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Hour_PDU : public ConcretePDU {
public:
    Hour_PDU();
    void set_data(Hour &);
    Hour *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Hour & d);
    const Hour *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC LatitudeDMS_PDU : public ConcretePDU {
public:
    LatitudeDMS_PDU();
    void set_data(LatitudeDMS &);
    LatitudeDMS *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const LatitudeDMS & d);
    const LatitudeDMS *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC LongitudeDMS_PDU : public ConcretePDU {
public:
    LongitudeDMS_PDU();
    void set_data(LongitudeDMS &);
    LongitudeDMS *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const LongitudeDMS & d);
    const LongitudeDMS *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC MaxTimetoChange_PDU : public ConcretePDU {
public:
    MaxTimetoChange_PDU();
    void set_data(MaxTimetoChange &);
    MaxTimetoChange *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const MaxTimetoChange & d);
    const MaxTimetoChange *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC MinTimetoChange_PDU : public ConcretePDU {
public:
    MinTimetoChange_PDU();
    void set_data(MinTimetoChange &);
    MinTimetoChange *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const MinTimetoChange & d);
    const MinTimetoChange *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Minute_PDU : public ConcretePDU {
public:
    Minute_PDU();
    void set_data(Minute &);
    Minute *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Minute & d);
    const Minute *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC MinutesAngle_PDU : public ConcretePDU {
public:
    MinutesAngle_PDU();
    void set_data(MinutesAngle &);
    MinutesAngle *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const MinutesAngle & d);
    const MinutesAngle *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Month_PDU : public ConcretePDU {
public:
    Month_PDU();
    void set_data(Month &);
    Month *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Month & d);
    const Month *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Second_PDU : public ConcretePDU {
public:
    Second_PDU();
    void set_data(Second &);
    Second *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Second & d);
    const Second *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC SecondsAngle_PDU : public ConcretePDU {
public:
    SecondsAngle_PDU();
    void set_data(SecondsAngle &);
    SecondsAngle *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const SecondsAngle & d);
    const SecondsAngle *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC TenthSecond_PDU : public ConcretePDU {
public:
    TenthSecond_PDU();
    void set_data(TenthSecond &);
    TenthSecond *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const TenthSecond & d);
    const TenthSecond *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC TimeRemaining_PDU : public ConcretePDU {
public:
    TimeRemaining_PDU();
    void set_data(TimeRemaining &);
    TimeRemaining *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const TimeRemaining & d);
    const TimeRemaining *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Year_PDU : public ConcretePDU {
public:
    Year_PDU();
    void set_data(Year &);
    Year *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Year & d);
    const Year *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC EssMobileFriction_PDU : public ConcretePDU {
public:
    EssMobileFriction_PDU();
    void set_data(EssMobileFriction &);
    EssMobileFriction *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const EssMobileFriction & d);
    const EssMobileFriction *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC EssPrecipRate_PDU : public ConcretePDU {
public:
    EssPrecipRate_PDU();
    void set_data(EssPrecipRate &);
    EssPrecipRate *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const EssPrecipRate & d);
    const EssPrecipRate *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC EssSolarRadiation_PDU : public ConcretePDU {
public:
    EssSolarRadiation_PDU();
    void set_data(EssSolarRadiation &);
    EssSolarRadiation *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const EssSolarRadiation & d);
    const EssSolarRadiation *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC ITIScodes_PDU : public ConcretePDU {
public:
    ITIScodes_PDU();
    void set_data(ITIScodes &);
    ITIScodes *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const ITIScodes & d);
    const ITIScodes *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC AnimalPropelledType_PDU : public ConcretePDU {
public:
    AnimalPropelledType_PDU();
    void set_data(AnimalPropelledType &);
    AnimalPropelledType *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const AnimalPropelledType & d);
    const AnimalPropelledType *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC AnimalType_PDU : public ConcretePDU {
public:
    AnimalType_PDU();
    void set_data(AnimalType &);
    AnimalType *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const AnimalType & d);
    const AnimalType *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Attachment_PDU : public ConcretePDU {
public:
    Attachment_PDU();
    void set_data(Attachment &);
    Attachment *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Attachment & d);
    const Attachment *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC BrakeAppliedPressure_PDU : public ConcretePDU {
public:
    BrakeAppliedPressure_PDU();
    void set_data(BrakeAppliedPressure &);
    BrakeAppliedPressure *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const BrakeAppliedPressure & d);
    const BrakeAppliedPressure *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC CodeWord_PDU : public ConcretePDU {
public:
    CodeWord_PDU();
    void set_data(CodeWord &);
    CodeWord *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const CodeWord & d);
    const CodeWord *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC DirectionOfUse_PDU : public ConcretePDU {
public:
    DirectionOfUse_PDU();
    void set_data(DirectionOfUse &);
    DirectionOfUse *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const DirectionOfUse & d);
    const DirectionOfUse *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC DistanceUnits_PDU : public ConcretePDU {
public:
    DistanceUnits_PDU();
    void set_data(DistanceUnits &);
    DistanceUnits *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const DistanceUnits & d);
    const DistanceUnits *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC ExteriorLights_PDU : public ConcretePDU {
public:
    ExteriorLights_PDU();
    void set_data(ExteriorLights &);
    ExteriorLights *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const ExteriorLights & d);
    const ExteriorLights *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC HumanPropelledType_PDU : public ConcretePDU {
public:
    HumanPropelledType_PDU();
    void set_data(HumanPropelledType &);
    HumanPropelledType *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const HumanPropelledType & d);
    const HumanPropelledType *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC IsDolly_PDU : public ConcretePDU {
public:
    IsDolly_PDU();
    void set_data(IsDolly &);
    IsDolly *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const IsDolly & d);
    const IsDolly *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC TirePressureThresholdDetection_PDU : public ConcretePDU {
public:
    TirePressureThresholdDetection_PDU();
    void set_data(TirePressureThresholdDetection &);
    TirePressureThresholdDetection *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const TirePressureThresholdDetection & d);
    const TirePressureThresholdDetection *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC WheelEndElectFault_PDU : public ConcretePDU {
public:
    WheelEndElectFault_PDU();
    void set_data(WheelEndElectFault &);
    WheelEndElectFault *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const WheelEndElectFault & d);
    const WheelEndElectFault *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC WheelSensorStatus_PDU : public ConcretePDU {
public:
    WheelSensorStatus_PDU();
    void set_data(WheelSensorStatus &);
    WheelSensorStatus *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const WheelSensorStatus & d);
    const WheelSensorStatus *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Location_quality_PDU : public ConcretePDU {
public:
    Location_quality_PDU();
    void set_data(Location_quality &);
    Location_quality *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Location_quality & d);
    const Location_quality *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC Location_tech_PDU : public ConcretePDU {
public:
    Location_tech_PDU();
    void set_data(Location_tech &);
    Location_tech *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const Location_tech & d);
    const Location_tech *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC MessageBLOB_PDU : public ConcretePDU {
public:
    MessageBLOB_PDU();
    void set_data(MessageBLOB &);
    MessageBLOB *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const MessageBLOB & d);
    const MessageBLOB *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC MotorizedPropelledType_PDU : public ConcretePDU {
public:
    MotorizedPropelledType_PDU();
    void set_data(MotorizedPropelledType &);
    MotorizedPropelledType *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const MotorizedPropelledType & d);
    const MotorizedPropelledType *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC MsgCRC_PDU : public ConcretePDU {
public:
    MsgCRC_PDU();
    void set_data(MsgCRC &);
    MsgCRC *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const MsgCRC & d);
    const MsgCRC *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC MUTCDCode_PDU : public ConcretePDU {
public:
    MUTCDCode_PDU();
    void set_data(MUTCDCode &);
    MUTCDCode *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const MUTCDCode & d);
    const MUTCDCode *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC NMEA_Payload_PDU : public ConcretePDU {
public:
    NMEA_Payload_PDU();
    void set_data(NMEA_Payload &);
    NMEA_Payload *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const NMEA_Payload & d);
    const NMEA_Payload *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC NMEA_Revision_PDU : public ConcretePDU {
public:
    NMEA_Revision_PDU();
    void set_data(NMEA_Revision &);
    NMEA_Revision *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const NMEA_Revision & d);
    const NMEA_Revision *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC NodeAttributeLL_PDU : public ConcretePDU {
public:
    NodeAttributeLL_PDU();
    void set_data(NodeAttributeLL &);
    NodeAttributeLL *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const NodeAttributeLL & d);
    const NodeAttributeLL *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC NumberOfParticipantsInCluster_PDU : public ConcretePDU {
public:
    NumberOfParticipantsInCluster_PDU();
    void set_data(NumberOfParticipantsInCluster &);
    NumberOfParticipantsInCluster *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const NumberOfParticipantsInCluster & d);
    const NumberOfParticipantsInCluster *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC PayloadData_PDU : public ConcretePDU {
public:
    PayloadData_PDU();
    void set_data(PayloadData &);
    PayloadData *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const PayloadData & d);
    const PayloadData *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC PersonalAssistive_PDU : public ConcretePDU {
public:
    PersonalAssistive_PDU();
    void set_data(PersonalAssistive &);
    PersonalAssistive *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const PersonalAssistive & d);
    const PersonalAssistive *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC PersonalCrossingInProgress_PDU : public ConcretePDU {
public:
    PersonalCrossingInProgress_PDU();
    void set_data(PersonalCrossingInProgress &);
    PersonalCrossingInProgress *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const PersonalCrossingInProgress & d);
    const PersonalCrossingInProgress *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC PersonalCrossingRequest_PDU : public ConcretePDU {
public:
    PersonalCrossingRequest_PDU();
    void set_data(PersonalCrossingRequest &);
    PersonalCrossingRequest *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const PersonalCrossingRequest & d);
    const PersonalCrossingRequest *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC PersonalDeviceUsageState_PDU : public ConcretePDU {
public:
    PersonalDeviceUsageState_PDU();
    void set_data(PersonalDeviceUsageState &);
    PersonalDeviceUsageState *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const PersonalDeviceUsageState & d);
    const PersonalDeviceUsageState *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC PersonalDeviceUserType_PDU : public ConcretePDU {
public:
    PersonalDeviceUserType_PDU();
    void set_data(PersonalDeviceUserType &);
    PersonalDeviceUserType *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const PersonalDeviceUserType & d);
    const PersonalDeviceUserType *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC PivotingAllowed_PDU : public ConcretePDU {
public:
    PivotingAllowed_PDU();
    void set_data(PivotingAllowed &);
    PivotingAllowed *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const PivotingAllowed & d);
    const PivotingAllowed *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC PublicSafetyAndRoadWorkerActivity_PDU : public ConcretePDU {
public:
    PublicSafetyAndRoadWorkerActivity_PDU();
    void set_data(PublicSafetyAndRoadWorkerActivity &);
    PublicSafetyAndRoadWorkerActivity *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const PublicSafetyAndRoadWorkerActivity & d);
    const PublicSafetyAndRoadWorkerActivity *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC PublicSafetyDirectingTrafficSubType_PDU : public ConcretePDU {
public:
    PublicSafetyDirectingTrafficSubType_PDU();
    void set_data(PublicSafetyDirectingTrafficSubType &);
    PublicSafetyDirectingTrafficSubType *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const PublicSafetyDirectingTrafficSubType & d);
    const PublicSafetyDirectingTrafficSubType *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC PublicSafetyEventResponderWorkerType_PDU : public ConcretePDU {
public:
    PublicSafetyEventResponderWorkerType_PDU();
    void set_data(PublicSafetyEventResponderWorkerType &);
    PublicSafetyEventResponderWorkerType *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const PublicSafetyEventResponderWorkerType & d);
    const PublicSafetyEventResponderWorkerType *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC RainSensor_PDU : public ConcretePDU {
public:
    RainSensor_PDU();
    void set_data(RainSensor &);
    RainSensor *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const RainSensor & d);
    const RainSensor *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC RequestedItem_PDU : public ConcretePDU {
public:
    RequestedItem_PDU();
    void set_data(RequestedItem &);
    RequestedItem *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const RequestedItem & d);
    const RequestedItem *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC RTCM_Revision_PDU : public ConcretePDU {
public:
    RTCM_Revision_PDU();
    void set_data(RTCM_Revision &);
    RTCM_Revision *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const RTCM_Revision & d);
    const RTCM_Revision *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC RTCMmessage_PDU : public ConcretePDU {
public:
    RTCMmessage_PDU();
    void set_data(RTCMmessage &);
    RTCMmessage *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const RTCMmessage & d);
    const RTCMmessage *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC SegmentAttributeLL_PDU : public ConcretePDU {
public:
    SegmentAttributeLL_PDU();
    void set_data(SegmentAttributeLL &);
    SegmentAttributeLL *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const SegmentAttributeLL & d);
    const SegmentAttributeLL *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC SignalReqScheme_PDU : public ConcretePDU {
public:
    SignalReqScheme_PDU();
    void set_data(SignalReqScheme &);
    SignalReqScheme *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const SignalReqScheme & d);
    const SignalReqScheme *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC TransitStatus_PDU : public ConcretePDU {
public:
    TransitStatus_PDU();
    void set_data(TransitStatus &);
    TransitStatus *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const TransitStatus & d);
    const TransitStatus *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC TravelerInfoType_PDU : public ConcretePDU {
public:
    TravelerInfoType_PDU();
    void set_data(TravelerInfoType &);
    TravelerInfoType *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const TravelerInfoType & d);
    const TravelerInfoType *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC UniqueMSGID_PDU : public ConcretePDU {
public:
    UniqueMSGID_PDU();
    void set_data(UniqueMSGID &);
    UniqueMSGID *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const UniqueMSGID & d);
    const UniqueMSGID *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC UserSizeAndBehaviour_PDU : public ConcretePDU {
public:
    UserSizeAndBehaviour_PDU();
    void set_data(UserSizeAndBehaviour &);
    UserSizeAndBehaviour *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const UserSizeAndBehaviour & d);
    const UserSizeAndBehaviour *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC VehicleEventFlags_PDU : public ConcretePDU {
public:
    VehicleEventFlags_PDU();
    void set_data(VehicleEventFlags &);
    VehicleEventFlags *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const VehicleEventFlags & d);
    const VehicleEventFlags *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC VehicleStatusDeviceTypeTag_PDU : public ConcretePDU {
public:
    VehicleStatusDeviceTypeTag_PDU();
    void set_data(VehicleStatusDeviceTypeTag &);
    VehicleStatusDeviceTypeTag *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const VehicleStatusDeviceTypeTag & d);
    const VehicleStatusDeviceTypeTag *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC VerticalAccelerationThreshold_PDU : public ConcretePDU {
public:
    VerticalAccelerationThreshold_PDU();
    void set_data(VerticalAccelerationThreshold &);
    VerticalAccelerationThreshold *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const VerticalAccelerationThreshold & d);
    const VerticalAccelerationThreshold *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC VINstring_PDU : public ConcretePDU {
public:
    VINstring_PDU();
    void set_data(VINstring &);
    VINstring *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const VINstring & d);
    const VINstring *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC WaitOnStopline_PDU : public ConcretePDU {
public:
    WaitOnStopline_PDU();
    void set_data(WaitOnStopline &);
    WaitOnStopline *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const WaitOnStopline & d);
    const WaitOnStopline *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC WiperStatus_PDU : public ConcretePDU {
public:
    WiperStatus_PDU();
    void set_data(WiperStatus &);
    WiperStatus *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const WiperStatus & d);
    const WiperStatus *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC DDate_PDU : public ConcretePDU {
public:
    DDate_PDU();
    void set_data(DDate &);
    DDate *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const DDate & d);
    const DDate *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC DFullTime_PDU : public ConcretePDU {
public:
    DFullTime_PDU();
    void set_data(DFullTime &);
    DFullTime *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const DFullTime & d);
    const DFullTime *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC DMonthDay_PDU : public ConcretePDU {
public:
    DMonthDay_PDU();
    void set_data(DMonthDay &);
    DMonthDay *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const DMonthDay & d);
    const DMonthDay *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC DYearMonth_PDU : public ConcretePDU {
public:
    DYearMonth_PDU();
    void set_data(DYearMonth &);
    DYearMonth *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const DYearMonth & d);
    const DYearMonth *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC BasicSafetyMessage_PDU : public ConcretePDU {
public:
    BasicSafetyMessage_PDU();
    void set_data(BasicSafetyMessage &);
    BasicSafetyMessage *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const BasicSafetyMessage & d);
    const BasicSafetyMessage *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC EmergencyVehicleAlert_PDU : public ConcretePDU {
public:
    EmergencyVehicleAlert_PDU();
    void set_data(EmergencyVehicleAlert &);
    EmergencyVehicleAlert *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const EmergencyVehicleAlert & d);
    const EmergencyVehicleAlert *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC IntersectionCollision_PDU : public ConcretePDU {
public:
    IntersectionCollision_PDU();
    void set_data(IntersectionCollision &);
    IntersectionCollision *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const IntersectionCollision & d);
    const IntersectionCollision *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC MapData_PDU : public ConcretePDU {
public:
    MapData_PDU();
    void set_data(MapData &);
    MapData *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const MapData & d);
    const MapData *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC SPAT_PDU : public ConcretePDU {
public:
    SPAT_PDU();
    void set_data(SPAT &);
    SPAT *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const SPAT & d);
    const SPAT *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC SignalRequestMessage_PDU : public ConcretePDU {
public:
    SignalRequestMessage_PDU();
    void set_data(SignalRequestMessage &);
    SignalRequestMessage *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const SignalRequestMessage & d);
    const SignalRequestMessage *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC SignalStatusMessage_PDU : public ConcretePDU {
public:
    SignalStatusMessage_PDU();
    void set_data(SignalStatusMessage &);
    SignalStatusMessage *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const SignalStatusMessage & d);
    const SignalStatusMessage *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC PathHistory_PDU : public ConcretePDU {
public:
    PathHistory_PDU();
    void set_data(PathHistory &);
    PathHistory *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const PathHistory & d);
    const PathHistory *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

class OSS_PUBLIC PathPrediction_PDU : public ConcretePDU {
public:
    PathPrediction_PDU();
    void set_data(PathPrediction &);
    PathPrediction *get_data() const;
#ifdef OSS_PREALLOCATED_BUFFER_DECODE_SUPPORTED
    void set_const_data(const PathPrediction & d);
    const PathPrediction *get_const_data() const;
#endif
protected:
    OssTypeIndex get_index() const;
};

/* Control object class */

class OSS_PUBLIC VehicleIDFrameModule_Control : public OssControl {
public:
    VehicleIDFrameModule_Control();
    VehicleIDFrameModule_Control(const VehicleIDFrameModule_Control &);
};


/* External definitions for named values */

const OSS_UINT32 unknownVehicleClass = 0;

const OSS_UINT32 specialVehicleClass = 1;

const OSS_UINT32 passenger_Vehicle_TypeUnknown = 10;

const OSS_UINT32 passenger_Vehicle_TypeOther = 11;

const OSS_UINT32 lightTruck_Vehicle_TypeUnknown = 20;

const OSS_UINT32 lightTruck_Vehicle_TypeOther = 21;

const OSS_UINT32 truck_Vehicle_TypeUnknown = 25;

const OSS_UINT32 truck_Vehicle_TypeOther = 26;

const OSS_UINT32 truck_axleCnt2 = 27;

const OSS_UINT32 truck_axleCnt3 = 28;

const OSS_UINT32 truck_axleCnt4 = 29;

const OSS_UINT32 truck_axleCnt4Trailer = 30;

const OSS_UINT32 truck_axleCnt5Trailer = 31;

const OSS_UINT32 truck_axleCnt6Trailer = 32;

const OSS_UINT32 truck_axleCnt5MultiTrailer = 33;

const OSS_UINT32 truck_axleCnt6MultiTrailer = 34;

const OSS_UINT32 truck_axleCnt7MultiTrailer = 35;

const OSS_UINT32 motorcycle_TypeUnknown = 40;

const OSS_UINT32 motorcycle_TypeOther = 41;

const OSS_UINT32 motorcycle_Cruiser_Standard = 42;

const OSS_UINT32 motorcycle_SportUnclad = 43;

const OSS_UINT32 motorcycle_SportTouring = 44;

const OSS_UINT32 motorcycle_SuperSport = 45;

const OSS_UINT32 motorcycle_Touring = 46;

const OSS_UINT32 motorcycle_Trike = 47;

const OSS_UINT32 motorcycle_wPassengers = 48;

const OSS_UINT32 transit_TypeUnknown = 50;

const OSS_UINT32 transit_TypeOther = 51;

const OSS_UINT32 unknownFuel = 0;

const OSS_UINT32 gasoline = 1;

const OSS_UINT32 ethanol = 2;

const OSS_UINT32 diesel = 3;

const OSS_UINT32 electric = 4;

const OSS_UINT32 hybrid = 5;

const OSS_UINT32 hydrogen = 6;

const OSS_UINT32 natGasLiquid = 7;

const OSS_UINT32 natGasComp = 8;

const OSS_UINT32 propane = 9;

const OSS_UINT32 noRegion = 0;

const OSS_UINT32 addGrpA = 1;

const OSS_UINT32 addGrpB = 2;

const OSS_UINT32 addGrpC = 3;

#endif // OSS_VehicleIDFrameModule
